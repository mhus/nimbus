/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ChunkData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7189619523573966243L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChunkData\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"fields\":[{\"name\":\"chunkX\",\"type\":\"int\"},{\"name\":\"chunkY\",\"type\":\"int\"},{\"name\":\"chunkZ\",\"type\":\"int\"},{\"name\":\"data\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"includeEmpty\",\"type\":\"boolean\",\"default\":false}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ChunkData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ChunkData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ChunkData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ChunkData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ChunkData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ChunkData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ChunkData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ChunkData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ChunkData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int chunkX;
  private int chunkY;
  private int chunkZ;
  private java.lang.String data;
  private boolean includeEmpty;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChunkData() {}

  /**
   * All-args constructor.
   * @param chunkX The new value for chunkX
   * @param chunkY The new value for chunkY
   * @param chunkZ The new value for chunkZ
   * @param data The new value for data
   * @param includeEmpty The new value for includeEmpty
   */
  public ChunkData(java.lang.Integer chunkX, java.lang.Integer chunkY, java.lang.Integer chunkZ, java.lang.String data, java.lang.Boolean includeEmpty) {
    this.chunkX = chunkX;
    this.chunkY = chunkY;
    this.chunkZ = chunkZ;
    this.data = data;
    this.includeEmpty = includeEmpty;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return chunkX;
    case 1: return chunkY;
    case 2: return chunkZ;
    case 3: return data;
    case 4: return includeEmpty;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: chunkX = (java.lang.Integer)value$; break;
    case 1: chunkY = (java.lang.Integer)value$; break;
    case 2: chunkZ = (java.lang.Integer)value$; break;
    case 3: data = value$ != null ? value$.toString() : null; break;
    case 4: includeEmpty = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'chunkX' field.
   * @return The value of the 'chunkX' field.
   */
  public int getChunkX() {
    return chunkX;
  }


  /**
   * Sets the value of the 'chunkX' field.
   * @param value the value to set.
   */
  public void setChunkX(int value) {
    this.chunkX = value;
  }

  /**
   * Gets the value of the 'chunkY' field.
   * @return The value of the 'chunkY' field.
   */
  public int getChunkY() {
    return chunkY;
  }


  /**
   * Sets the value of the 'chunkY' field.
   * @param value the value to set.
   */
  public void setChunkY(int value) {
    this.chunkY = value;
  }

  /**
   * Gets the value of the 'chunkZ' field.
   * @return The value of the 'chunkZ' field.
   */
  public int getChunkZ() {
    return chunkZ;
  }


  /**
   * Sets the value of the 'chunkZ' field.
   * @param value the value to set.
   */
  public void setChunkZ(int value) {
    this.chunkZ = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.lang.String getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.lang.String value) {
    this.data = value;
  }

  /**
   * Gets the value of the 'includeEmpty' field.
   * @return The value of the 'includeEmpty' field.
   */
  public boolean getIncludeEmpty() {
    return includeEmpty;
  }


  /**
   * Sets the value of the 'includeEmpty' field.
   * @param value the value to set.
   */
  public void setIncludeEmpty(boolean value) {
    this.includeEmpty = value;
  }

  /**
   * Creates a new ChunkData RecordBuilder.
   * @return A new ChunkData RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.ChunkData.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.ChunkData.Builder();
  }

  /**
   * Creates a new ChunkData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChunkData RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.ChunkData.Builder newBuilder(de.mhus.nimbus.shared.avro.ChunkData.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.ChunkData.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.ChunkData.Builder(other);
    }
  }

  /**
   * Creates a new ChunkData RecordBuilder by copying an existing ChunkData instance.
   * @param other The existing instance to copy.
   * @return A new ChunkData RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.ChunkData.Builder newBuilder(de.mhus.nimbus.shared.avro.ChunkData other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.ChunkData.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.ChunkData.Builder(other);
    }
  }

  /**
   * RecordBuilder for ChunkData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChunkData>
    implements org.apache.avro.data.RecordBuilder<ChunkData> {

    private int chunkX;
    private int chunkY;
    private int chunkZ;
    private java.lang.String data;
    private boolean includeEmpty;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.ChunkData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.chunkX)) {
        this.chunkX = data().deepCopy(fields()[0].schema(), other.chunkX);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.chunkY)) {
        this.chunkY = data().deepCopy(fields()[1].schema(), other.chunkY);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.chunkZ)) {
        this.chunkZ = data().deepCopy(fields()[2].schema(), other.chunkZ);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.includeEmpty)) {
        this.includeEmpty = data().deepCopy(fields()[4].schema(), other.includeEmpty);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ChunkData instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.ChunkData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.chunkX)) {
        this.chunkX = data().deepCopy(fields()[0].schema(), other.chunkX);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.chunkY)) {
        this.chunkY = data().deepCopy(fields()[1].schema(), other.chunkY);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chunkZ)) {
        this.chunkZ = data().deepCopy(fields()[2].schema(), other.chunkZ);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.includeEmpty)) {
        this.includeEmpty = data().deepCopy(fields()[4].schema(), other.includeEmpty);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'chunkX' field.
      * @return The value.
      */
    public int getChunkX() {
      return chunkX;
    }


    /**
      * Sets the value of the 'chunkX' field.
      * @param value The value of 'chunkX'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ChunkData.Builder setChunkX(int value) {
      validate(fields()[0], value);
      this.chunkX = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'chunkX' field has been set.
      * @return True if the 'chunkX' field has been set, false otherwise.
      */
    public boolean hasChunkX() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'chunkX' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ChunkData.Builder clearChunkX() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'chunkY' field.
      * @return The value.
      */
    public int getChunkY() {
      return chunkY;
    }


    /**
      * Sets the value of the 'chunkY' field.
      * @param value The value of 'chunkY'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ChunkData.Builder setChunkY(int value) {
      validate(fields()[1], value);
      this.chunkY = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'chunkY' field has been set.
      * @return True if the 'chunkY' field has been set, false otherwise.
      */
    public boolean hasChunkY() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'chunkY' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ChunkData.Builder clearChunkY() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'chunkZ' field.
      * @return The value.
      */
    public int getChunkZ() {
      return chunkZ;
    }


    /**
      * Sets the value of the 'chunkZ' field.
      * @param value The value of 'chunkZ'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ChunkData.Builder setChunkZ(int value) {
      validate(fields()[2], value);
      this.chunkZ = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'chunkZ' field has been set.
      * @return True if the 'chunkZ' field has been set, false otherwise.
      */
    public boolean hasChunkZ() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'chunkZ' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ChunkData.Builder clearChunkZ() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.lang.String getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ChunkData.Builder setData(java.lang.String value) {
      validate(fields()[3], value);
      this.data = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ChunkData.Builder clearData() {
      data = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'includeEmpty' field.
      * @return The value.
      */
    public boolean getIncludeEmpty() {
      return includeEmpty;
    }


    /**
      * Sets the value of the 'includeEmpty' field.
      * @param value The value of 'includeEmpty'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ChunkData.Builder setIncludeEmpty(boolean value) {
      validate(fields()[4], value);
      this.includeEmpty = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'includeEmpty' field has been set.
      * @return True if the 'includeEmpty' field has been set, false otherwise.
      */
    public boolean hasIncludeEmpty() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'includeEmpty' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ChunkData.Builder clearIncludeEmpty() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ChunkData build() {
      try {
        ChunkData record = new ChunkData();
        record.chunkX = fieldSetFlags()[0] ? this.chunkX : (java.lang.Integer) defaultValue(fields()[0]);
        record.chunkY = fieldSetFlags()[1] ? this.chunkY : (java.lang.Integer) defaultValue(fields()[1]);
        record.chunkZ = fieldSetFlags()[2] ? this.chunkZ : (java.lang.Integer) defaultValue(fields()[2]);
        record.data = fieldSetFlags()[3] ? this.data : (java.lang.String) defaultValue(fields()[3]);
        record.includeEmpty = fieldSetFlags()[4] ? this.includeEmpty : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ChunkData>
    WRITER$ = (org.apache.avro.io.DatumWriter<ChunkData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ChunkData>
    READER$ = (org.apache.avro.io.DatumReader<ChunkData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.chunkX);

    out.writeInt(this.chunkY);

    out.writeInt(this.chunkZ);

    if (this.data == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.data);
    }

    out.writeBoolean(this.includeEmpty);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.chunkX = in.readInt();

      this.chunkY = in.readInt();

      this.chunkZ = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.data = null;
      } else {
        this.data = in.readString();
      }

      this.includeEmpty = in.readBoolean();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.chunkX = in.readInt();
          break;

        case 1:
          this.chunkY = in.readInt();
          break;

        case 2:
          this.chunkZ = in.readInt();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.data = null;
          } else {
            this.data = in.readString();
          }
          break;

        case 4:
          this.includeEmpty = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










