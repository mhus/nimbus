/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CharacterData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6450649932790851601L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CharacterData\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"fields\":[{\"name\":\"characterId\",\"type\":[\"null\",\"long\"],\"doc\":\"ID of the character (for updates/deletes)\",\"default\":null},{\"name\":\"characterType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Type of the character (for creation)\",\"default\":null},{\"name\":\"x\",\"type\":[\"null\",\"double\"],\"doc\":\"X coordinate\",\"default\":null},{\"name\":\"y\",\"type\":[\"null\",\"double\"],\"doc\":\"Y coordinate\",\"default\":null},{\"name\":\"z\",\"type\":[\"null\",\"double\"],\"doc\":\"Z coordinate\",\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Character name\",\"default\":null},{\"name\":\"displayName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Character display name\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Character description\",\"default\":null},{\"name\":\"health\",\"type\":[\"null\",\"int\"],\"doc\":\"Current health points\",\"default\":null},{\"name\":\"maxHealth\",\"type\":[\"null\",\"int\"],\"doc\":\"Maximum health points\",\"default\":null},{\"name\":\"active\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Whether the character is active\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CharacterData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CharacterData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CharacterData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CharacterData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CharacterData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CharacterData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CharacterData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CharacterData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CharacterData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** ID of the character (for updates/deletes) */
  private java.lang.Long characterId;
  /** Type of the character (for creation) */
  private java.lang.String characterType;
  /** X coordinate */
  private java.lang.Double x;
  /** Y coordinate */
  private java.lang.Double y;
  /** Z coordinate */
  private java.lang.Double z;
  /** Character name */
  private java.lang.String name;
  /** Character display name */
  private java.lang.String displayName;
  /** Character description */
  private java.lang.String description;
  /** Current health points */
  private java.lang.Integer health;
  /** Maximum health points */
  private java.lang.Integer maxHealth;
  /** Whether the character is active */
  private java.lang.Boolean active;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CharacterData() {}

  /**
   * All-args constructor.
   * @param characterId ID of the character (for updates/deletes)
   * @param characterType Type of the character (for creation)
   * @param x X coordinate
   * @param y Y coordinate
   * @param z Z coordinate
   * @param name Character name
   * @param displayName Character display name
   * @param description Character description
   * @param health Current health points
   * @param maxHealth Maximum health points
   * @param active Whether the character is active
   */
  public CharacterData(java.lang.Long characterId, java.lang.String characterType, java.lang.Double x, java.lang.Double y, java.lang.Double z, java.lang.String name, java.lang.String displayName, java.lang.String description, java.lang.Integer health, java.lang.Integer maxHealth, java.lang.Boolean active) {
    this.characterId = characterId;
    this.characterType = characterType;
    this.x = x;
    this.y = y;
    this.z = z;
    this.name = name;
    this.displayName = displayName;
    this.description = description;
    this.health = health;
    this.maxHealth = maxHealth;
    this.active = active;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return characterId;
    case 1: return characterType;
    case 2: return x;
    case 3: return y;
    case 4: return z;
    case 5: return name;
    case 6: return displayName;
    case 7: return description;
    case 8: return health;
    case 9: return maxHealth;
    case 10: return active;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: characterId = (java.lang.Long)value$; break;
    case 1: characterType = value$ != null ? value$.toString() : null; break;
    case 2: x = (java.lang.Double)value$; break;
    case 3: y = (java.lang.Double)value$; break;
    case 4: z = (java.lang.Double)value$; break;
    case 5: name = value$ != null ? value$.toString() : null; break;
    case 6: displayName = value$ != null ? value$.toString() : null; break;
    case 7: description = value$ != null ? value$.toString() : null; break;
    case 8: health = (java.lang.Integer)value$; break;
    case 9: maxHealth = (java.lang.Integer)value$; break;
    case 10: active = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'characterId' field.
   * @return ID of the character (for updates/deletes)
   */
  public java.lang.Long getCharacterId() {
    return characterId;
  }


  /**
   * Sets the value of the 'characterId' field.
   * ID of the character (for updates/deletes)
   * @param value the value to set.
   */
  public void setCharacterId(java.lang.Long value) {
    this.characterId = value;
  }

  /**
   * Gets the value of the 'characterType' field.
   * @return Type of the character (for creation)
   */
  public java.lang.String getCharacterType() {
    return characterType;
  }


  /**
   * Sets the value of the 'characterType' field.
   * Type of the character (for creation)
   * @param value the value to set.
   */
  public void setCharacterType(java.lang.String value) {
    this.characterType = value;
  }

  /**
   * Gets the value of the 'x' field.
   * @return X coordinate
   */
  public java.lang.Double getX() {
    return x;
  }


  /**
   * Sets the value of the 'x' field.
   * X coordinate
   * @param value the value to set.
   */
  public void setX(java.lang.Double value) {
    this.x = value;
  }

  /**
   * Gets the value of the 'y' field.
   * @return Y coordinate
   */
  public java.lang.Double getY() {
    return y;
  }


  /**
   * Sets the value of the 'y' field.
   * Y coordinate
   * @param value the value to set.
   */
  public void setY(java.lang.Double value) {
    this.y = value;
  }

  /**
   * Gets the value of the 'z' field.
   * @return Z coordinate
   */
  public java.lang.Double getZ() {
    return z;
  }


  /**
   * Sets the value of the 'z' field.
   * Z coordinate
   * @param value the value to set.
   */
  public void setZ(java.lang.Double value) {
    this.z = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Character name
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Character name
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'displayName' field.
   * @return Character display name
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }


  /**
   * Sets the value of the 'displayName' field.
   * Character display name
   * @param value the value to set.
   */
  public void setDisplayName(java.lang.String value) {
    this.displayName = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Character description
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * Character description
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'health' field.
   * @return Current health points
   */
  public java.lang.Integer getHealth() {
    return health;
  }


  /**
   * Sets the value of the 'health' field.
   * Current health points
   * @param value the value to set.
   */
  public void setHealth(java.lang.Integer value) {
    this.health = value;
  }

  /**
   * Gets the value of the 'maxHealth' field.
   * @return Maximum health points
   */
  public java.lang.Integer getMaxHealth() {
    return maxHealth;
  }


  /**
   * Sets the value of the 'maxHealth' field.
   * Maximum health points
   * @param value the value to set.
   */
  public void setMaxHealth(java.lang.Integer value) {
    this.maxHealth = value;
  }

  /**
   * Gets the value of the 'active' field.
   * @return Whether the character is active
   */
  public java.lang.Boolean getActive() {
    return active;
  }


  /**
   * Sets the value of the 'active' field.
   * Whether the character is active
   * @param value the value to set.
   */
  public void setActive(java.lang.Boolean value) {
    this.active = value;
  }

  /**
   * Creates a new CharacterData RecordBuilder.
   * @return A new CharacterData RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.CharacterData.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.CharacterData.Builder();
  }

  /**
   * Creates a new CharacterData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CharacterData RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.CharacterData.Builder newBuilder(de.mhus.nimbus.shared.avro.CharacterData.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.CharacterData.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.CharacterData.Builder(other);
    }
  }

  /**
   * Creates a new CharacterData RecordBuilder by copying an existing CharacterData instance.
   * @param other The existing instance to copy.
   * @return A new CharacterData RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.CharacterData.Builder newBuilder(de.mhus.nimbus.shared.avro.CharacterData other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.CharacterData.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.CharacterData.Builder(other);
    }
  }

  /**
   * RecordBuilder for CharacterData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CharacterData>
    implements org.apache.avro.data.RecordBuilder<CharacterData> {

    /** ID of the character (for updates/deletes) */
    private java.lang.Long characterId;
    /** Type of the character (for creation) */
    private java.lang.String characterType;
    /** X coordinate */
    private java.lang.Double x;
    /** Y coordinate */
    private java.lang.Double y;
    /** Z coordinate */
    private java.lang.Double z;
    /** Character name */
    private java.lang.String name;
    /** Character display name */
    private java.lang.String displayName;
    /** Character description */
    private java.lang.String description;
    /** Current health points */
    private java.lang.Integer health;
    /** Maximum health points */
    private java.lang.Integer maxHealth;
    /** Whether the character is active */
    private java.lang.Boolean active;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.CharacterData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.characterId)) {
        this.characterId = data().deepCopy(fields()[0].schema(), other.characterId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.characterType)) {
        this.characterType = data().deepCopy(fields()[1].schema(), other.characterType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.x)) {
        this.x = data().deepCopy(fields()[2].schema(), other.x);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.y)) {
        this.y = data().deepCopy(fields()[3].schema(), other.y);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.z)) {
        this.z = data().deepCopy(fields()[4].schema(), other.z);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.name)) {
        this.name = data().deepCopy(fields()[5].schema(), other.name);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.displayName)) {
        this.displayName = data().deepCopy(fields()[6].schema(), other.displayName);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.description)) {
        this.description = data().deepCopy(fields()[7].schema(), other.description);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.health)) {
        this.health = data().deepCopy(fields()[8].schema(), other.health);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.maxHealth)) {
        this.maxHealth = data().deepCopy(fields()[9].schema(), other.maxHealth);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.active)) {
        this.active = data().deepCopy(fields()[10].schema(), other.active);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing CharacterData instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.CharacterData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.characterId)) {
        this.characterId = data().deepCopy(fields()[0].schema(), other.characterId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.characterType)) {
        this.characterType = data().deepCopy(fields()[1].schema(), other.characterType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.x)) {
        this.x = data().deepCopy(fields()[2].schema(), other.x);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.y)) {
        this.y = data().deepCopy(fields()[3].schema(), other.y);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.z)) {
        this.z = data().deepCopy(fields()[4].schema(), other.z);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.name)) {
        this.name = data().deepCopy(fields()[5].schema(), other.name);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.displayName)) {
        this.displayName = data().deepCopy(fields()[6].schema(), other.displayName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.description)) {
        this.description = data().deepCopy(fields()[7].schema(), other.description);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.health)) {
        this.health = data().deepCopy(fields()[8].schema(), other.health);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.maxHealth)) {
        this.maxHealth = data().deepCopy(fields()[9].schema(), other.maxHealth);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.active)) {
        this.active = data().deepCopy(fields()[10].schema(), other.active);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'characterId' field.
      * ID of the character (for updates/deletes)
      * @return The value.
      */
    public java.lang.Long getCharacterId() {
      return characterId;
    }


    /**
      * Sets the value of the 'characterId' field.
      * ID of the character (for updates/deletes)
      * @param value The value of 'characterId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder setCharacterId(java.lang.Long value) {
      validate(fields()[0], value);
      this.characterId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'characterId' field has been set.
      * ID of the character (for updates/deletes)
      * @return True if the 'characterId' field has been set, false otherwise.
      */
    public boolean hasCharacterId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'characterId' field.
      * ID of the character (for updates/deletes)
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder clearCharacterId() {
      characterId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'characterType' field.
      * Type of the character (for creation)
      * @return The value.
      */
    public java.lang.String getCharacterType() {
      return characterType;
    }


    /**
      * Sets the value of the 'characterType' field.
      * Type of the character (for creation)
      * @param value The value of 'characterType'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder setCharacterType(java.lang.String value) {
      validate(fields()[1], value);
      this.characterType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'characterType' field has been set.
      * Type of the character (for creation)
      * @return True if the 'characterType' field has been set, false otherwise.
      */
    public boolean hasCharacterType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'characterType' field.
      * Type of the character (for creation)
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder clearCharacterType() {
      characterType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'x' field.
      * X coordinate
      * @return The value.
      */
    public java.lang.Double getX() {
      return x;
    }


    /**
      * Sets the value of the 'x' field.
      * X coordinate
      * @param value The value of 'x'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder setX(java.lang.Double value) {
      validate(fields()[2], value);
      this.x = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'x' field has been set.
      * X coordinate
      * @return True if the 'x' field has been set, false otherwise.
      */
    public boolean hasX() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'x' field.
      * X coordinate
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder clearX() {
      x = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'y' field.
      * Y coordinate
      * @return The value.
      */
    public java.lang.Double getY() {
      return y;
    }


    /**
      * Sets the value of the 'y' field.
      * Y coordinate
      * @param value The value of 'y'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder setY(java.lang.Double value) {
      validate(fields()[3], value);
      this.y = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'y' field has been set.
      * Y coordinate
      * @return True if the 'y' field has been set, false otherwise.
      */
    public boolean hasY() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'y' field.
      * Y coordinate
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder clearY() {
      y = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'z' field.
      * Z coordinate
      * @return The value.
      */
    public java.lang.Double getZ() {
      return z;
    }


    /**
      * Sets the value of the 'z' field.
      * Z coordinate
      * @param value The value of 'z'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder setZ(java.lang.Double value) {
      validate(fields()[4], value);
      this.z = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'z' field has been set.
      * Z coordinate
      * @return True if the 'z' field has been set, false otherwise.
      */
    public boolean hasZ() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'z' field.
      * Z coordinate
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder clearZ() {
      z = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Character name
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Character name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder setName(java.lang.String value) {
      validate(fields()[5], value);
      this.name = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Character name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'name' field.
      * Character name
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder clearName() {
      name = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'displayName' field.
      * Character display name
      * @return The value.
      */
    public java.lang.String getDisplayName() {
      return displayName;
    }


    /**
      * Sets the value of the 'displayName' field.
      * Character display name
      * @param value The value of 'displayName'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder setDisplayName(java.lang.String value) {
      validate(fields()[6], value);
      this.displayName = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'displayName' field has been set.
      * Character display name
      * @return True if the 'displayName' field has been set, false otherwise.
      */
    public boolean hasDisplayName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'displayName' field.
      * Character display name
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder clearDisplayName() {
      displayName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Character description
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * Character description
      * @param value The value of 'description'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder setDescription(java.lang.String value) {
      validate(fields()[7], value);
      this.description = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Character description
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'description' field.
      * Character description
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder clearDescription() {
      description = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'health' field.
      * Current health points
      * @return The value.
      */
    public java.lang.Integer getHealth() {
      return health;
    }


    /**
      * Sets the value of the 'health' field.
      * Current health points
      * @param value The value of 'health'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder setHealth(java.lang.Integer value) {
      validate(fields()[8], value);
      this.health = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'health' field has been set.
      * Current health points
      * @return True if the 'health' field has been set, false otherwise.
      */
    public boolean hasHealth() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'health' field.
      * Current health points
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder clearHealth() {
      health = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxHealth' field.
      * Maximum health points
      * @return The value.
      */
    public java.lang.Integer getMaxHealth() {
      return maxHealth;
    }


    /**
      * Sets the value of the 'maxHealth' field.
      * Maximum health points
      * @param value The value of 'maxHealth'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder setMaxHealth(java.lang.Integer value) {
      validate(fields()[9], value);
      this.maxHealth = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'maxHealth' field has been set.
      * Maximum health points
      * @return True if the 'maxHealth' field has been set, false otherwise.
      */
    public boolean hasMaxHealth() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'maxHealth' field.
      * Maximum health points
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder clearMaxHealth() {
      maxHealth = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'active' field.
      * Whether the character is active
      * @return The value.
      */
    public java.lang.Boolean getActive() {
      return active;
    }


    /**
      * Sets the value of the 'active' field.
      * Whether the character is active
      * @param value The value of 'active'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder setActive(java.lang.Boolean value) {
      validate(fields()[10], value);
      this.active = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'active' field has been set.
      * Whether the character is active
      * @return True if the 'active' field has been set, false otherwise.
      */
    public boolean hasActive() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'active' field.
      * Whether the character is active
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.CharacterData.Builder clearActive() {
      active = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CharacterData build() {
      try {
        CharacterData record = new CharacterData();
        record.characterId = fieldSetFlags()[0] ? this.characterId : (java.lang.Long) defaultValue(fields()[0]);
        record.characterType = fieldSetFlags()[1] ? this.characterType : (java.lang.String) defaultValue(fields()[1]);
        record.x = fieldSetFlags()[2] ? this.x : (java.lang.Double) defaultValue(fields()[2]);
        record.y = fieldSetFlags()[3] ? this.y : (java.lang.Double) defaultValue(fields()[3]);
        record.z = fieldSetFlags()[4] ? this.z : (java.lang.Double) defaultValue(fields()[4]);
        record.name = fieldSetFlags()[5] ? this.name : (java.lang.String) defaultValue(fields()[5]);
        record.displayName = fieldSetFlags()[6] ? this.displayName : (java.lang.String) defaultValue(fields()[6]);
        record.description = fieldSetFlags()[7] ? this.description : (java.lang.String) defaultValue(fields()[7]);
        record.health = fieldSetFlags()[8] ? this.health : (java.lang.Integer) defaultValue(fields()[8]);
        record.maxHealth = fieldSetFlags()[9] ? this.maxHealth : (java.lang.Integer) defaultValue(fields()[9]);
        record.active = fieldSetFlags()[10] ? this.active : (java.lang.Boolean) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CharacterData>
    WRITER$ = (org.apache.avro.io.DatumWriter<CharacterData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CharacterData>
    READER$ = (org.apache.avro.io.DatumReader<CharacterData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.characterId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.characterId);
    }

    if (this.characterType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.characterType);
    }

    if (this.x == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.x);
    }

    if (this.y == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.y);
    }

    if (this.z == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.z);
    }

    if (this.name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.name);
    }

    if (this.displayName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.displayName);
    }

    if (this.description == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.description);
    }

    if (this.health == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.health);
    }

    if (this.maxHealth == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.maxHealth);
    }

    if (this.active == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.active);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.characterId = null;
      } else {
        this.characterId = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.characterType = null;
      } else {
        this.characterType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.x = null;
      } else {
        this.x = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.y = null;
      } else {
        this.y = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.z = null;
      } else {
        this.z = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.name = null;
      } else {
        this.name = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.displayName = null;
      } else {
        this.displayName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.description = null;
      } else {
        this.description = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.health = null;
      } else {
        this.health = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.maxHealth = null;
      } else {
        this.maxHealth = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.active = null;
      } else {
        this.active = in.readBoolean();
      }

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.characterId = null;
          } else {
            this.characterId = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.characterType = null;
          } else {
            this.characterType = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.x = null;
          } else {
            this.x = in.readDouble();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.y = null;
          } else {
            this.y = in.readDouble();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.z = null;
          } else {
            this.z = in.readDouble();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.name = null;
          } else {
            this.name = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.displayName = null;
          } else {
            this.displayName = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.description = null;
          } else {
            this.description = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.health = null;
          } else {
            this.health = in.readInt();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.maxHealth = null;
          } else {
            this.maxHealth = in.readInt();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.active = null;
          } else {
            this.active = in.readBoolean();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










