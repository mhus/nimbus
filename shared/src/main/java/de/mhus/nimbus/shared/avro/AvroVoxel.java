/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroVoxel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3408196541173335356L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroVoxel\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"fields\":[{\"name\":\"x\",\"type\":\"int\"},{\"name\":\"y\",\"type\":\"int\"},{\"name\":\"z\",\"type\":\"int\"},{\"name\":\"voxelType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"health\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"tags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroVoxel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroVoxel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroVoxel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroVoxel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroVoxel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroVoxel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroVoxel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroVoxel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroVoxel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int x;
  private int y;
  private int z;
  private java.lang.String voxelType;
  private java.lang.String material;
  private java.lang.Float health;
  private java.util.List<java.lang.String> tags;
  private java.util.Map<java.lang.String,java.lang.String> properties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroVoxel() {}

  /**
   * All-args constructor.
   * @param x The new value for x
   * @param y The new value for y
   * @param z The new value for z
   * @param voxelType The new value for voxelType
   * @param material The new value for material
   * @param health The new value for health
   * @param tags The new value for tags
   * @param properties The new value for properties
   */
  public AvroVoxel(java.lang.Integer x, java.lang.Integer y, java.lang.Integer z, java.lang.String voxelType, java.lang.String material, java.lang.Float health, java.util.List<java.lang.String> tags, java.util.Map<java.lang.String,java.lang.String> properties) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.voxelType = voxelType;
    this.material = material;
    this.health = health;
    this.tags = tags;
    this.properties = properties;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return x;
    case 1: return y;
    case 2: return z;
    case 3: return voxelType;
    case 4: return material;
    case 5: return health;
    case 6: return tags;
    case 7: return properties;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: x = (java.lang.Integer)value$; break;
    case 1: y = (java.lang.Integer)value$; break;
    case 2: z = (java.lang.Integer)value$; break;
    case 3: voxelType = value$ != null ? value$.toString() : null; break;
    case 4: material = value$ != null ? value$.toString() : null; break;
    case 5: health = (java.lang.Float)value$; break;
    case 6: tags = (java.util.List<java.lang.String>)value$; break;
    case 7: properties = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'x' field.
   * @return The value of the 'x' field.
   */
  public int getX() {
    return x;
  }


  /**
   * Sets the value of the 'x' field.
   * @param value the value to set.
   */
  public void setX(int value) {
    this.x = value;
  }

  /**
   * Gets the value of the 'y' field.
   * @return The value of the 'y' field.
   */
  public int getY() {
    return y;
  }


  /**
   * Sets the value of the 'y' field.
   * @param value the value to set.
   */
  public void setY(int value) {
    this.y = value;
  }

  /**
   * Gets the value of the 'z' field.
   * @return The value of the 'z' field.
   */
  public int getZ() {
    return z;
  }


  /**
   * Sets the value of the 'z' field.
   * @param value the value to set.
   */
  public void setZ(int value) {
    this.z = value;
  }

  /**
   * Gets the value of the 'voxelType' field.
   * @return The value of the 'voxelType' field.
   */
  public java.lang.String getVoxelType() {
    return voxelType;
  }


  /**
   * Sets the value of the 'voxelType' field.
   * @param value the value to set.
   */
  public void setVoxelType(java.lang.String value) {
    this.voxelType = value;
  }

  /**
   * Gets the value of the 'material' field.
   * @return The value of the 'material' field.
   */
  public java.lang.String getMaterial() {
    return material;
  }


  /**
   * Sets the value of the 'material' field.
   * @param value the value to set.
   */
  public void setMaterial(java.lang.String value) {
    this.material = value;
  }

  /**
   * Gets the value of the 'health' field.
   * @return The value of the 'health' field.
   */
  public java.lang.Float getHealth() {
    return health;
  }


  /**
   * Sets the value of the 'health' field.
   * @param value the value to set.
   */
  public void setHealth(java.lang.Float value) {
    this.health = value;
  }

  /**
   * Gets the value of the 'tags' field.
   * @return The value of the 'tags' field.
   */
  public java.util.List<java.lang.String> getTags() {
    return tags;
  }


  /**
   * Sets the value of the 'tags' field.
   * @param value the value to set.
   */
  public void setTags(java.util.List<java.lang.String> value) {
    this.tags = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return The value of the 'properties' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return properties;
  }


  /**
   * Sets the value of the 'properties' field.
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.String,java.lang.String> value) {
    this.properties = value;
  }

  /**
   * Creates a new AvroVoxel RecordBuilder.
   * @return A new AvroVoxel RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.AvroVoxel.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.AvroVoxel.Builder();
  }

  /**
   * Creates a new AvroVoxel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroVoxel RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.AvroVoxel.Builder newBuilder(de.mhus.nimbus.shared.avro.AvroVoxel.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.AvroVoxel.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.AvroVoxel.Builder(other);
    }
  }

  /**
   * Creates a new AvroVoxel RecordBuilder by copying an existing AvroVoxel instance.
   * @param other The existing instance to copy.
   * @return A new AvroVoxel RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.AvroVoxel.Builder newBuilder(de.mhus.nimbus.shared.avro.AvroVoxel other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.AvroVoxel.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.AvroVoxel.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroVoxel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroVoxel>
    implements org.apache.avro.data.RecordBuilder<AvroVoxel> {

    private int x;
    private int y;
    private int z;
    private java.lang.String voxelType;
    private java.lang.String material;
    private java.lang.Float health;
    private java.util.List<java.lang.String> tags;
    private java.util.Map<java.lang.String,java.lang.String> properties;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.AvroVoxel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.x)) {
        this.x = data().deepCopy(fields()[0].schema(), other.x);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.y)) {
        this.y = data().deepCopy(fields()[1].schema(), other.y);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.z)) {
        this.z = data().deepCopy(fields()[2].schema(), other.z);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.voxelType)) {
        this.voxelType = data().deepCopy(fields()[3].schema(), other.voxelType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.material)) {
        this.material = data().deepCopy(fields()[4].schema(), other.material);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.health)) {
        this.health = data().deepCopy(fields()[5].schema(), other.health);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.tags)) {
        this.tags = data().deepCopy(fields()[6].schema(), other.tags);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.properties)) {
        this.properties = data().deepCopy(fields()[7].schema(), other.properties);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroVoxel instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.AvroVoxel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.x)) {
        this.x = data().deepCopy(fields()[0].schema(), other.x);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.y)) {
        this.y = data().deepCopy(fields()[1].schema(), other.y);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.z)) {
        this.z = data().deepCopy(fields()[2].schema(), other.z);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.voxelType)) {
        this.voxelType = data().deepCopy(fields()[3].schema(), other.voxelType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.material)) {
        this.material = data().deepCopy(fields()[4].schema(), other.material);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.health)) {
        this.health = data().deepCopy(fields()[5].schema(), other.health);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tags)) {
        this.tags = data().deepCopy(fields()[6].schema(), other.tags);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.properties)) {
        this.properties = data().deepCopy(fields()[7].schema(), other.properties);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'x' field.
      * @return The value.
      */
    public int getX() {
      return x;
    }


    /**
      * Sets the value of the 'x' field.
      * @param value The value of 'x'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder setX(int value) {
      validate(fields()[0], value);
      this.x = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'x' field has been set.
      * @return True if the 'x' field has been set, false otherwise.
      */
    public boolean hasX() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'x' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder clearX() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'y' field.
      * @return The value.
      */
    public int getY() {
      return y;
    }


    /**
      * Sets the value of the 'y' field.
      * @param value The value of 'y'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder setY(int value) {
      validate(fields()[1], value);
      this.y = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'y' field has been set.
      * @return True if the 'y' field has been set, false otherwise.
      */
    public boolean hasY() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'y' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder clearY() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'z' field.
      * @return The value.
      */
    public int getZ() {
      return z;
    }


    /**
      * Sets the value of the 'z' field.
      * @param value The value of 'z'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder setZ(int value) {
      validate(fields()[2], value);
      this.z = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'z' field has been set.
      * @return True if the 'z' field has been set, false otherwise.
      */
    public boolean hasZ() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'z' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder clearZ() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'voxelType' field.
      * @return The value.
      */
    public java.lang.String getVoxelType() {
      return voxelType;
    }


    /**
      * Sets the value of the 'voxelType' field.
      * @param value The value of 'voxelType'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder setVoxelType(java.lang.String value) {
      validate(fields()[3], value);
      this.voxelType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'voxelType' field has been set.
      * @return True if the 'voxelType' field has been set, false otherwise.
      */
    public boolean hasVoxelType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'voxelType' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder clearVoxelType() {
      voxelType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'material' field.
      * @return The value.
      */
    public java.lang.String getMaterial() {
      return material;
    }


    /**
      * Sets the value of the 'material' field.
      * @param value The value of 'material'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder setMaterial(java.lang.String value) {
      validate(fields()[4], value);
      this.material = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'material' field has been set.
      * @return True if the 'material' field has been set, false otherwise.
      */
    public boolean hasMaterial() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'material' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder clearMaterial() {
      material = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'health' field.
      * @return The value.
      */
    public java.lang.Float getHealth() {
      return health;
    }


    /**
      * Sets the value of the 'health' field.
      * @param value The value of 'health'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder setHealth(java.lang.Float value) {
      validate(fields()[5], value);
      this.health = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'health' field has been set.
      * @return True if the 'health' field has been set, false otherwise.
      */
    public boolean hasHealth() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'health' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder clearHealth() {
      health = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'tags' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getTags() {
      return tags;
    }


    /**
      * Sets the value of the 'tags' field.
      * @param value The value of 'tags'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder setTags(java.util.List<java.lang.String> value) {
      validate(fields()[6], value);
      this.tags = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'tags' field has been set.
      * @return True if the 'tags' field has been set, false otherwise.
      */
    public boolean hasTags() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'tags' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder clearTags() {
      tags = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getProperties() {
      return properties;
    }


    /**
      * Sets the value of the 'properties' field.
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder setProperties(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[7], value);
      this.properties = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'properties' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AvroVoxel.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroVoxel build() {
      try {
        AvroVoxel record = new AvroVoxel();
        record.x = fieldSetFlags()[0] ? this.x : (java.lang.Integer) defaultValue(fields()[0]);
        record.y = fieldSetFlags()[1] ? this.y : (java.lang.Integer) defaultValue(fields()[1]);
        record.z = fieldSetFlags()[2] ? this.z : (java.lang.Integer) defaultValue(fields()[2]);
        record.voxelType = fieldSetFlags()[3] ? this.voxelType : (java.lang.String) defaultValue(fields()[3]);
        record.material = fieldSetFlags()[4] ? this.material : (java.lang.String) defaultValue(fields()[4]);
        record.health = fieldSetFlags()[5] ? this.health : (java.lang.Float) defaultValue(fields()[5]);
        record.tags = fieldSetFlags()[6] ? this.tags : (java.util.List<java.lang.String>) defaultValue(fields()[6]);
        record.properties = fieldSetFlags()[7] ? this.properties : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroVoxel>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroVoxel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroVoxel>
    READER$ = (org.apache.avro.io.DatumReader<AvroVoxel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.x);

    out.writeInt(this.y);

    out.writeInt(this.z);

    if (this.voxelType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.voxelType);
    }

    if (this.material == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.material);
    }

    if (this.health == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.health);
    }

    if (this.tags == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.tags.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.String e0: this.tags) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.properties == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.properties.size();
      out.writeMapStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> e1: this.properties.entrySet()) {
        actualSize1++;
        out.startItem();
        out.writeString(e1.getKey());
        java.lang.String v1 = e1.getValue();
        out.writeString(v1);
      }
      out.writeMapEnd();
      if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.x = in.readInt();

      this.y = in.readInt();

      this.z = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.voxelType = null;
      } else {
        this.voxelType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.material = null;
      } else {
        this.material = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.health = null;
      } else {
        this.health = in.readFloat();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.tags = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.String> a0 = this.tags;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("tags").schema().getTypes().get(1));
          this.tags = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString();
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.properties = null;
      } else {
        long size1 = in.readMapStart();
        java.util.Map<java.lang.String,java.lang.String> m1 = this.properties; // Need fresh name due to limitation of macro system
        if (m1 == null) {
          m1 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size1);
          this.properties = m1;
        } else m1.clear();
        for ( ; 0 < size1; size1 = in.mapNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.String k1 = null;
            k1 = in.readString();
            java.lang.String v1 = null;
            v1 = in.readString();
            m1.put(k1, v1);
          }
        }
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.x = in.readInt();
          break;

        case 1:
          this.y = in.readInt();
          break;

        case 2:
          this.z = in.readInt();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.voxelType = null;
          } else {
            this.voxelType = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.material = null;
          } else {
            this.material = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.health = null;
          } else {
            this.health = in.readFloat();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.tags = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.String> a0 = this.tags;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("tags").schema().getTypes().get(1));
              this.tags = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString();
                a0.add(e0);
              }
            }
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.properties = null;
          } else {
            long size1 = in.readMapStart();
            java.util.Map<java.lang.String,java.lang.String> m1 = this.properties; // Need fresh name due to limitation of macro system
            if (m1 == null) {
              m1 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size1);
              this.properties = m1;
            } else m1.clear();
            for ( ; 0 < size1; size1 = in.mapNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.String k1 = null;
                k1 = in.readString();
                java.lang.String v1 = null;
                v1 = in.readString();
                m1.put(k1, v1);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










