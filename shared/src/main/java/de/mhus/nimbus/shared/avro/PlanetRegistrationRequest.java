/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema für Planet-Registrierungs-Anfragen im Nimbus Registry System */
@org.apache.avro.specific.AvroGenerated
public class PlanetRegistrationRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5771810641450986930L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlanetRegistrationRequest\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"doc\":\"Schema für Planet-Registrierungs-Anfragen im Nimbus Registry System\",\"fields\":[{\"name\":\"requestId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Eindeutige ID der Planet-Registrierungs-Anfrage\"},{\"name\":\"planetName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name des zu registrierenden Planeten\"},{\"name\":\"environment\",\"type\":{\"type\":\"enum\",\"name\":\"Environment\",\"symbols\":[\"DEV\",\"TEST\",\"STAGING\",\"PROD\"]},\"doc\":\"Umgebung für die Planet-Registrierung\",\"default\":\"DEV\"},{\"name\":\"planetInfo\",\"type\":{\"type\":\"record\",\"name\":\"PlanetInfo\",\"fields\":[{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Beschreibung des Planeten\",\"default\":null},{\"name\":\"galaxy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Name der Galaxie\",\"default\":null},{\"name\":\"sector\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Sektor innerhalb der Galaxie\",\"default\":null},{\"name\":\"systemName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Name des Sternensystems\",\"default\":null},{\"name\":\"population\",\"type\":[\"null\",\"long\"],\"doc\":\"Bevölkerung des Planeten\",\"default\":null},{\"name\":\"climate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Klima des Planeten\",\"default\":null},{\"name\":\"terrain\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Terrain-Typ des Planeten\",\"default\":null},{\"name\":\"surfaceWater\",\"type\":[\"null\",\"int\"],\"doc\":\"Prozentsatz der Wasseroberfläche\",\"default\":null},{\"name\":\"gravity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Schwerkraft relativ zu Standard\",\"default\":null}]},\"doc\":\"Informationen über den Planeten\"},{\"name\":\"worlds\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"WorldRegistration\",\"fields\":[{\"name\":\"worldId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Eindeutige ID der Welt\"},{\"name\":\"worldName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name der Welt\"},{\"name\":\"managementUrl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"URL des Management-Services für diese Welt\"},{\"name\":\"apiUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"API-URL für diese Welt\",\"default\":null},{\"name\":\"webUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Web-URL für diese Welt\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Beschreibung der Welt\",\"default\":null},{\"name\":\"worldType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Typ der Welt (z.B. settlement, cantina, temple)\",\"default\":null},{\"name\":\"accessLevel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Zugangsebene (public, private, restricted)\",\"default\":null},{\"name\":\"metadata\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"Zusätzliche Metadaten der Welt\",\"default\":{}}]}},\"doc\":\"Liste der zu registrierenden Welten\",\"default\":[]},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Zeitstempel der Anfrage in Millisekunden\"},{\"name\":\"registeredBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Benutzer oder Service, der die Registrierung durchführt\",\"default\":null},{\"name\":\"metadata\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"Zusätzliche Metadaten für die Registrierungs-Anfrage\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<PlanetRegistrationRequest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlanetRegistrationRequest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PlanetRegistrationRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PlanetRegistrationRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PlanetRegistrationRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PlanetRegistrationRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PlanetRegistrationRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PlanetRegistrationRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PlanetRegistrationRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Eindeutige ID der Planet-Registrierungs-Anfrage */
  private java.lang.String requestId;
  /** Name des zu registrierenden Planeten */
  private java.lang.String planetName;
  /** Umgebung für die Planet-Registrierung */
  private de.mhus.nimbus.shared.avro.Environment environment;
  /** Informationen über den Planeten */
  private de.mhus.nimbus.shared.avro.PlanetInfo planetInfo;
  /** Liste der zu registrierenden Welten */
  private java.util.List<de.mhus.nimbus.shared.avro.WorldRegistration> worlds;
  /** Zeitstempel der Anfrage in Millisekunden */
  private java.time.Instant timestamp;
  /** Benutzer oder Service, der die Registrierung durchführt */
  private java.lang.String registeredBy;
  /** Zusätzliche Metadaten für die Registrierungs-Anfrage */
  private java.util.Map<java.lang.String,java.lang.String> metadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlanetRegistrationRequest() {}

  /**
   * All-args constructor.
   * @param requestId Eindeutige ID der Planet-Registrierungs-Anfrage
   * @param planetName Name des zu registrierenden Planeten
   * @param environment Umgebung für die Planet-Registrierung
   * @param planetInfo Informationen über den Planeten
   * @param worlds Liste der zu registrierenden Welten
   * @param timestamp Zeitstempel der Anfrage in Millisekunden
   * @param registeredBy Benutzer oder Service, der die Registrierung durchführt
   * @param metadata Zusätzliche Metadaten für die Registrierungs-Anfrage
   */
  public PlanetRegistrationRequest(java.lang.String requestId, java.lang.String planetName, de.mhus.nimbus.shared.avro.Environment environment, de.mhus.nimbus.shared.avro.PlanetInfo planetInfo, java.util.List<de.mhus.nimbus.shared.avro.WorldRegistration> worlds, java.time.Instant timestamp, java.lang.String registeredBy, java.util.Map<java.lang.String,java.lang.String> metadata) {
    this.requestId = requestId;
    this.planetName = planetName;
    this.environment = environment;
    this.planetInfo = planetInfo;
    this.worlds = worlds;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.registeredBy = registeredBy;
    this.metadata = metadata;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return planetName;
    case 2: return environment;
    case 3: return planetInfo;
    case 4: return worlds;
    case 5: return timestamp;
    case 6: return registeredBy;
    case 7: return metadata;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = value$ != null ? value$.toString() : null; break;
    case 1: planetName = value$ != null ? value$.toString() : null; break;
    case 2: environment = (de.mhus.nimbus.shared.avro.Environment)value$; break;
    case 3: planetInfo = (de.mhus.nimbus.shared.avro.PlanetInfo)value$; break;
    case 4: worlds = (java.util.List<de.mhus.nimbus.shared.avro.WorldRegistration>)value$; break;
    case 5: timestamp = (java.time.Instant)value$; break;
    case 6: registeredBy = value$ != null ? value$.toString() : null; break;
    case 7: metadata = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return Eindeutige ID der Planet-Registrierungs-Anfrage
   */
  public java.lang.String getRequestId() {
    return requestId;
  }



  /**
   * Gets the value of the 'planetName' field.
   * @return Name des zu registrierenden Planeten
   */
  public java.lang.String getPlanetName() {
    return planetName;
  }



  /**
   * Gets the value of the 'environment' field.
   * @return Umgebung für die Planet-Registrierung
   */
  public de.mhus.nimbus.shared.avro.Environment getEnvironment() {
    return environment;
  }



  /**
   * Gets the value of the 'planetInfo' field.
   * @return Informationen über den Planeten
   */
  public de.mhus.nimbus.shared.avro.PlanetInfo getPlanetInfo() {
    return planetInfo;
  }



  /**
   * Gets the value of the 'worlds' field.
   * @return Liste der zu registrierenden Welten
   */
  public java.util.List<de.mhus.nimbus.shared.avro.WorldRegistration> getWorlds() {
    return worlds;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return Zeitstempel der Anfrage in Millisekunden
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }



  /**
   * Gets the value of the 'registeredBy' field.
   * @return Benutzer oder Service, der die Registrierung durchführt
   */
  public java.lang.String getRegisteredBy() {
    return registeredBy;
  }



  /**
   * Gets the value of the 'metadata' field.
   * @return Zusätzliche Metadaten für die Registrierungs-Anfrage
   */
  public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
    return metadata;
  }



  /**
   * Creates a new PlanetRegistrationRequest RecordBuilder.
   * @return A new PlanetRegistrationRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder();
  }

  /**
   * Creates a new PlanetRegistrationRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlanetRegistrationRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder newBuilder(de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder(other);
    }
  }

  /**
   * Creates a new PlanetRegistrationRequest RecordBuilder by copying an existing PlanetRegistrationRequest instance.
   * @param other The existing instance to copy.
   * @return A new PlanetRegistrationRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder newBuilder(de.mhus.nimbus.shared.avro.PlanetRegistrationRequest other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for PlanetRegistrationRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlanetRegistrationRequest>
    implements org.apache.avro.data.RecordBuilder<PlanetRegistrationRequest> {

    /** Eindeutige ID der Planet-Registrierungs-Anfrage */
    private java.lang.String requestId;
    /** Name des zu registrierenden Planeten */
    private java.lang.String planetName;
    /** Umgebung für die Planet-Registrierung */
    private de.mhus.nimbus.shared.avro.Environment environment;
    /** Informationen über den Planeten */
    private de.mhus.nimbus.shared.avro.PlanetInfo planetInfo;
    private de.mhus.nimbus.shared.avro.PlanetInfo.Builder planetInfoBuilder;
    /** Liste der zu registrierenden Welten */
    private java.util.List<de.mhus.nimbus.shared.avro.WorldRegistration> worlds;
    /** Zeitstempel der Anfrage in Millisekunden */
    private java.time.Instant timestamp;
    /** Benutzer oder Service, der die Registrierung durchführt */
    private java.lang.String registeredBy;
    /** Zusätzliche Metadaten für die Registrierungs-Anfrage */
    private java.util.Map<java.lang.String,java.lang.String> metadata;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.planetName)) {
        this.planetName = data().deepCopy(fields()[1].schema(), other.planetName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.environment)) {
        this.environment = data().deepCopy(fields()[2].schema(), other.environment);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.planetInfo)) {
        this.planetInfo = data().deepCopy(fields()[3].schema(), other.planetInfo);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasPlanetInfoBuilder()) {
        this.planetInfoBuilder = de.mhus.nimbus.shared.avro.PlanetInfo.newBuilder(other.getPlanetInfoBuilder());
      }
      if (isValidValue(fields()[4], other.worlds)) {
        this.worlds = data().deepCopy(fields()[4].schema(), other.worlds);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.registeredBy)) {
        this.registeredBy = data().deepCopy(fields()[6].schema(), other.registeredBy);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.metadata)) {
        this.metadata = data().deepCopy(fields()[7].schema(), other.metadata);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing PlanetRegistrationRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.PlanetRegistrationRequest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.planetName)) {
        this.planetName = data().deepCopy(fields()[1].schema(), other.planetName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.environment)) {
        this.environment = data().deepCopy(fields()[2].schema(), other.environment);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.planetInfo)) {
        this.planetInfo = data().deepCopy(fields()[3].schema(), other.planetInfo);
        fieldSetFlags()[3] = true;
      }
      this.planetInfoBuilder = null;
      if (isValidValue(fields()[4], other.worlds)) {
        this.worlds = data().deepCopy(fields()[4].schema(), other.worlds);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.registeredBy)) {
        this.registeredBy = data().deepCopy(fields()[6].schema(), other.registeredBy);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.metadata)) {
        this.metadata = data().deepCopy(fields()[7].schema(), other.metadata);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'requestId' field.
      * Eindeutige ID der Planet-Registrierungs-Anfrage
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * Eindeutige ID der Planet-Registrierungs-Anfrage
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder setRequestId(java.lang.String value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * Eindeutige ID der Planet-Registrierungs-Anfrage
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestId' field.
      * Eindeutige ID der Planet-Registrierungs-Anfrage
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'planetName' field.
      * Name des zu registrierenden Planeten
      * @return The value.
      */
    public java.lang.String getPlanetName() {
      return planetName;
    }


    /**
      * Sets the value of the 'planetName' field.
      * Name des zu registrierenden Planeten
      * @param value The value of 'planetName'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder setPlanetName(java.lang.String value) {
      validate(fields()[1], value);
      this.planetName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'planetName' field has been set.
      * Name des zu registrierenden Planeten
      * @return True if the 'planetName' field has been set, false otherwise.
      */
    public boolean hasPlanetName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'planetName' field.
      * Name des zu registrierenden Planeten
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder clearPlanetName() {
      planetName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'environment' field.
      * Umgebung für die Planet-Registrierung
      * @return The value.
      */
    public de.mhus.nimbus.shared.avro.Environment getEnvironment() {
      return environment;
    }


    /**
      * Sets the value of the 'environment' field.
      * Umgebung für die Planet-Registrierung
      * @param value The value of 'environment'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder setEnvironment(de.mhus.nimbus.shared.avro.Environment value) {
      validate(fields()[2], value);
      this.environment = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'environment' field has been set.
      * Umgebung für die Planet-Registrierung
      * @return True if the 'environment' field has been set, false otherwise.
      */
    public boolean hasEnvironment() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'environment' field.
      * Umgebung für die Planet-Registrierung
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder clearEnvironment() {
      environment = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'planetInfo' field.
      * Informationen über den Planeten
      * @return The value.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo getPlanetInfo() {
      return planetInfo;
    }


    /**
      * Sets the value of the 'planetInfo' field.
      * Informationen über den Planeten
      * @param value The value of 'planetInfo'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder setPlanetInfo(de.mhus.nimbus.shared.avro.PlanetInfo value) {
      validate(fields()[3], value);
      this.planetInfoBuilder = null;
      this.planetInfo = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'planetInfo' field has been set.
      * Informationen über den Planeten
      * @return True if the 'planetInfo' field has been set, false otherwise.
      */
    public boolean hasPlanetInfo() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'planetInfo' field and creates one if it doesn't exist yet.
     * Informationen über den Planeten
     * @return This builder.
     */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder getPlanetInfoBuilder() {
      if (planetInfoBuilder == null) {
        if (hasPlanetInfo()) {
          setPlanetInfoBuilder(de.mhus.nimbus.shared.avro.PlanetInfo.newBuilder(planetInfo));
        } else {
          setPlanetInfoBuilder(de.mhus.nimbus.shared.avro.PlanetInfo.newBuilder());
        }
      }
      return planetInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'planetInfo' field
     * Informationen über den Planeten
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder setPlanetInfoBuilder(de.mhus.nimbus.shared.avro.PlanetInfo.Builder value) {
      clearPlanetInfo();
      planetInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'planetInfo' field has an active Builder instance
     * Informationen über den Planeten
     * @return True if the 'planetInfo' field has an active Builder instance
     */
    public boolean hasPlanetInfoBuilder() {
      return planetInfoBuilder != null;
    }

    /**
      * Clears the value of the 'planetInfo' field.
      * Informationen über den Planeten
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder clearPlanetInfo() {
      planetInfo = null;
      planetInfoBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'worlds' field.
      * Liste der zu registrierenden Welten
      * @return The value.
      */
    public java.util.List<de.mhus.nimbus.shared.avro.WorldRegistration> getWorlds() {
      return worlds;
    }


    /**
      * Sets the value of the 'worlds' field.
      * Liste der zu registrierenden Welten
      * @param value The value of 'worlds'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder setWorlds(java.util.List<de.mhus.nimbus.shared.avro.WorldRegistration> value) {
      validate(fields()[4], value);
      this.worlds = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'worlds' field has been set.
      * Liste der zu registrierenden Welten
      * @return True if the 'worlds' field has been set, false otherwise.
      */
    public boolean hasWorlds() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'worlds' field.
      * Liste der zu registrierenden Welten
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder clearWorlds() {
      worlds = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Zeitstempel der Anfrage in Millisekunden
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Zeitstempel der Anfrage in Millisekunden
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[5], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Zeitstempel der Anfrage in Millisekunden
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Zeitstempel der Anfrage in Millisekunden
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder clearTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'registeredBy' field.
      * Benutzer oder Service, der die Registrierung durchführt
      * @return The value.
      */
    public java.lang.String getRegisteredBy() {
      return registeredBy;
    }


    /**
      * Sets the value of the 'registeredBy' field.
      * Benutzer oder Service, der die Registrierung durchführt
      * @param value The value of 'registeredBy'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder setRegisteredBy(java.lang.String value) {
      validate(fields()[6], value);
      this.registeredBy = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'registeredBy' field has been set.
      * Benutzer oder Service, der die Registrierung durchführt
      * @return True if the 'registeredBy' field has been set, false otherwise.
      */
    public boolean hasRegisteredBy() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'registeredBy' field.
      * Benutzer oder Service, der die Registrierung durchführt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder clearRegisteredBy() {
      registeredBy = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * Zusätzliche Metadaten für die Registrierungs-Anfrage
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * Zusätzliche Metadaten für die Registrierungs-Anfrage
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder setMetadata(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[7], value);
      this.metadata = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * Zusätzliche Metadaten für die Registrierungs-Anfrage
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'metadata' field.
      * Zusätzliche Metadaten für die Registrierungs-Anfrage
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationRequest.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlanetRegistrationRequest build() {
      try {
        PlanetRegistrationRequest record = new PlanetRegistrationRequest();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.String) defaultValue(fields()[0]);
        record.planetName = fieldSetFlags()[1] ? this.planetName : (java.lang.String) defaultValue(fields()[1]);
        record.environment = fieldSetFlags()[2] ? this.environment : (de.mhus.nimbus.shared.avro.Environment) defaultValue(fields()[2]);
        if (planetInfoBuilder != null) {
          try {
            record.planetInfo = this.planetInfoBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("planetInfo"));
            throw e;
          }
        } else {
          record.planetInfo = fieldSetFlags()[3] ? this.planetInfo : (de.mhus.nimbus.shared.avro.PlanetInfo) defaultValue(fields()[3]);
        }
        record.worlds = fieldSetFlags()[4] ? this.worlds : (java.util.List<de.mhus.nimbus.shared.avro.WorldRegistration>) defaultValue(fields()[4]);
        record.timestamp = fieldSetFlags()[5] ? this.timestamp : (java.time.Instant) defaultValue(fields()[5]);
        record.registeredBy = fieldSetFlags()[6] ? this.registeredBy : (java.lang.String) defaultValue(fields()[6]);
        record.metadata = fieldSetFlags()[7] ? this.metadata : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlanetRegistrationRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlanetRegistrationRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlanetRegistrationRequest>
    READER$ = (org.apache.avro.io.DatumReader<PlanetRegistrationRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










