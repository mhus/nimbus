/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema für Public Key Antworten im Nimbus Identity System */
@org.apache.avro.specific.AvroGenerated
public class PublicKeyResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4588278907392779153L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PublicKeyResponse\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"doc\":\"Schema für Public Key Antworten im Nimbus Identity System\",\"fields\":[{\"name\":\"requestId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"ID der ursprünglichen Public Key Anfrage\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"PublicKeyStatus\",\"symbols\":[\"SUCCESS\",\"ERROR\"]},\"doc\":\"Status der Public Key Anfrage\"},{\"name\":\"publicKey\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Base64-kodierter öffentlicher RSA-Schlüssel\",\"default\":null},{\"name\":\"keyType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Typ des Schlüssels (z.B. RSA)\",\"default\":null},{\"name\":\"algorithm\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Signatur-Algorithmus (z.B. RS256)\",\"default\":null},{\"name\":\"issuer\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Token-Issuer für Validierung\",\"default\":null},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Zeitstempel der Antwort\"},{\"name\":\"errorMessage\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Fehlermeldung bei ERROR-Status\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<PublicKeyResponse> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PublicKeyResponse> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PublicKeyResponse> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PublicKeyResponse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PublicKeyResponse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PublicKeyResponse to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PublicKeyResponse from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PublicKeyResponse instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PublicKeyResponse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** ID der ursprünglichen Public Key Anfrage */
  private java.lang.String requestId;
  /** Status der Public Key Anfrage */
  private de.mhus.nimbus.shared.avro.PublicKeyStatus status;
  /** Base64-kodierter öffentlicher RSA-Schlüssel */
  private java.lang.String publicKey;
  /** Typ des Schlüssels (z.B. RSA) */
  private java.lang.String keyType;
  /** Signatur-Algorithmus (z.B. RS256) */
  private java.lang.String algorithm;
  /** Token-Issuer für Validierung */
  private java.lang.String issuer;
  /** Zeitstempel der Antwort */
  private java.time.Instant timestamp;
  /** Fehlermeldung bei ERROR-Status */
  private java.lang.String errorMessage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PublicKeyResponse() {}

  /**
   * All-args constructor.
   * @param requestId ID der ursprünglichen Public Key Anfrage
   * @param status Status der Public Key Anfrage
   * @param publicKey Base64-kodierter öffentlicher RSA-Schlüssel
   * @param keyType Typ des Schlüssels (z.B. RSA)
   * @param algorithm Signatur-Algorithmus (z.B. RS256)
   * @param issuer Token-Issuer für Validierung
   * @param timestamp Zeitstempel der Antwort
   * @param errorMessage Fehlermeldung bei ERROR-Status
   */
  public PublicKeyResponse(java.lang.String requestId, de.mhus.nimbus.shared.avro.PublicKeyStatus status, java.lang.String publicKey, java.lang.String keyType, java.lang.String algorithm, java.lang.String issuer, java.time.Instant timestamp, java.lang.String errorMessage) {
    this.requestId = requestId;
    this.status = status;
    this.publicKey = publicKey;
    this.keyType = keyType;
    this.algorithm = algorithm;
    this.issuer = issuer;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.errorMessage = errorMessage;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return status;
    case 2: return publicKey;
    case 3: return keyType;
    case 4: return algorithm;
    case 5: return issuer;
    case 6: return timestamp;
    case 7: return errorMessage;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = value$ != null ? value$.toString() : null; break;
    case 1: status = (de.mhus.nimbus.shared.avro.PublicKeyStatus)value$; break;
    case 2: publicKey = value$ != null ? value$.toString() : null; break;
    case 3: keyType = value$ != null ? value$.toString() : null; break;
    case 4: algorithm = value$ != null ? value$.toString() : null; break;
    case 5: issuer = value$ != null ? value$.toString() : null; break;
    case 6: timestamp = (java.time.Instant)value$; break;
    case 7: errorMessage = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return ID der ursprünglichen Public Key Anfrage
   */
  public java.lang.String getRequestId() {
    return requestId;
  }



  /**
   * Gets the value of the 'status' field.
   * @return Status der Public Key Anfrage
   */
  public de.mhus.nimbus.shared.avro.PublicKeyStatus getStatus() {
    return status;
  }



  /**
   * Gets the value of the 'publicKey' field.
   * @return Base64-kodierter öffentlicher RSA-Schlüssel
   */
  public java.lang.String getPublicKey() {
    return publicKey;
  }



  /**
   * Gets the value of the 'keyType' field.
   * @return Typ des Schlüssels (z.B. RSA)
   */
  public java.lang.String getKeyType() {
    return keyType;
  }



  /**
   * Gets the value of the 'algorithm' field.
   * @return Signatur-Algorithmus (z.B. RS256)
   */
  public java.lang.String getAlgorithm() {
    return algorithm;
  }



  /**
   * Gets the value of the 'issuer' field.
   * @return Token-Issuer für Validierung
   */
  public java.lang.String getIssuer() {
    return issuer;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return Zeitstempel der Antwort
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }



  /**
   * Gets the value of the 'errorMessage' field.
   * @return Fehlermeldung bei ERROR-Status
   */
  public java.lang.String getErrorMessage() {
    return errorMessage;
  }



  /**
   * Creates a new PublicKeyResponse RecordBuilder.
   * @return A new PublicKeyResponse RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder();
  }

  /**
   * Creates a new PublicKeyResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PublicKeyResponse RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder newBuilder(de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder(other);
    }
  }

  /**
   * Creates a new PublicKeyResponse RecordBuilder by copying an existing PublicKeyResponse instance.
   * @param other The existing instance to copy.
   * @return A new PublicKeyResponse RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder newBuilder(de.mhus.nimbus.shared.avro.PublicKeyResponse other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder(other);
    }
  }

  /**
   * RecordBuilder for PublicKeyResponse instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PublicKeyResponse>
    implements org.apache.avro.data.RecordBuilder<PublicKeyResponse> {

    /** ID der ursprünglichen Public Key Anfrage */
    private java.lang.String requestId;
    /** Status der Public Key Anfrage */
    private de.mhus.nimbus.shared.avro.PublicKeyStatus status;
    /** Base64-kodierter öffentlicher RSA-Schlüssel */
    private java.lang.String publicKey;
    /** Typ des Schlüssels (z.B. RSA) */
    private java.lang.String keyType;
    /** Signatur-Algorithmus (z.B. RS256) */
    private java.lang.String algorithm;
    /** Token-Issuer für Validierung */
    private java.lang.String issuer;
    /** Zeitstempel der Antwort */
    private java.time.Instant timestamp;
    /** Fehlermeldung bei ERROR-Status */
    private java.lang.String errorMessage;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.publicKey)) {
        this.publicKey = data().deepCopy(fields()[2].schema(), other.publicKey);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.keyType)) {
        this.keyType = data().deepCopy(fields()[3].schema(), other.keyType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.algorithm)) {
        this.algorithm = data().deepCopy(fields()[4].schema(), other.algorithm);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.issuer)) {
        this.issuer = data().deepCopy(fields()[5].schema(), other.issuer);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.errorMessage)) {
        this.errorMessage = data().deepCopy(fields()[7].schema(), other.errorMessage);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing PublicKeyResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.PublicKeyResponse other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.publicKey)) {
        this.publicKey = data().deepCopy(fields()[2].schema(), other.publicKey);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.keyType)) {
        this.keyType = data().deepCopy(fields()[3].schema(), other.keyType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.algorithm)) {
        this.algorithm = data().deepCopy(fields()[4].schema(), other.algorithm);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.issuer)) {
        this.issuer = data().deepCopy(fields()[5].schema(), other.issuer);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.errorMessage)) {
        this.errorMessage = data().deepCopy(fields()[7].schema(), other.errorMessage);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'requestId' field.
      * ID der ursprünglichen Public Key Anfrage
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * ID der ursprünglichen Public Key Anfrage
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder setRequestId(java.lang.String value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * ID der ursprünglichen Public Key Anfrage
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestId' field.
      * ID der ursprünglichen Public Key Anfrage
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Status der Public Key Anfrage
      * @return The value.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * Status der Public Key Anfrage
      * @param value The value of 'status'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder setStatus(de.mhus.nimbus.shared.avro.PublicKeyStatus value) {
      validate(fields()[1], value);
      this.status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Status der Public Key Anfrage
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'status' field.
      * Status der Public Key Anfrage
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder clearStatus() {
      status = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'publicKey' field.
      * Base64-kodierter öffentlicher RSA-Schlüssel
      * @return The value.
      */
    public java.lang.String getPublicKey() {
      return publicKey;
    }


    /**
      * Sets the value of the 'publicKey' field.
      * Base64-kodierter öffentlicher RSA-Schlüssel
      * @param value The value of 'publicKey'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder setPublicKey(java.lang.String value) {
      validate(fields()[2], value);
      this.publicKey = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'publicKey' field has been set.
      * Base64-kodierter öffentlicher RSA-Schlüssel
      * @return True if the 'publicKey' field has been set, false otherwise.
      */
    public boolean hasPublicKey() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'publicKey' field.
      * Base64-kodierter öffentlicher RSA-Schlüssel
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder clearPublicKey() {
      publicKey = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyType' field.
      * Typ des Schlüssels (z.B. RSA)
      * @return The value.
      */
    public java.lang.String getKeyType() {
      return keyType;
    }


    /**
      * Sets the value of the 'keyType' field.
      * Typ des Schlüssels (z.B. RSA)
      * @param value The value of 'keyType'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder setKeyType(java.lang.String value) {
      validate(fields()[3], value);
      this.keyType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'keyType' field has been set.
      * Typ des Schlüssels (z.B. RSA)
      * @return True if the 'keyType' field has been set, false otherwise.
      */
    public boolean hasKeyType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'keyType' field.
      * Typ des Schlüssels (z.B. RSA)
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder clearKeyType() {
      keyType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'algorithm' field.
      * Signatur-Algorithmus (z.B. RS256)
      * @return The value.
      */
    public java.lang.String getAlgorithm() {
      return algorithm;
    }


    /**
      * Sets the value of the 'algorithm' field.
      * Signatur-Algorithmus (z.B. RS256)
      * @param value The value of 'algorithm'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder setAlgorithm(java.lang.String value) {
      validate(fields()[4], value);
      this.algorithm = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'algorithm' field has been set.
      * Signatur-Algorithmus (z.B. RS256)
      * @return True if the 'algorithm' field has been set, false otherwise.
      */
    public boolean hasAlgorithm() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'algorithm' field.
      * Signatur-Algorithmus (z.B. RS256)
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder clearAlgorithm() {
      algorithm = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'issuer' field.
      * Token-Issuer für Validierung
      * @return The value.
      */
    public java.lang.String getIssuer() {
      return issuer;
    }


    /**
      * Sets the value of the 'issuer' field.
      * Token-Issuer für Validierung
      * @param value The value of 'issuer'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder setIssuer(java.lang.String value) {
      validate(fields()[5], value);
      this.issuer = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'issuer' field has been set.
      * Token-Issuer für Validierung
      * @return True if the 'issuer' field has been set, false otherwise.
      */
    public boolean hasIssuer() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'issuer' field.
      * Token-Issuer für Validierung
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder clearIssuer() {
      issuer = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Zeitstempel der Antwort
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Zeitstempel der Antwort
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[6], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Zeitstempel der Antwort
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Zeitstempel der Antwort
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder clearTimestamp() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorMessage' field.
      * Fehlermeldung bei ERROR-Status
      * @return The value.
      */
    public java.lang.String getErrorMessage() {
      return errorMessage;
    }


    /**
      * Sets the value of the 'errorMessage' field.
      * Fehlermeldung bei ERROR-Status
      * @param value The value of 'errorMessage'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder setErrorMessage(java.lang.String value) {
      validate(fields()[7], value);
      this.errorMessage = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'errorMessage' field has been set.
      * Fehlermeldung bei ERROR-Status
      * @return True if the 'errorMessage' field has been set, false otherwise.
      */
    public boolean hasErrorMessage() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'errorMessage' field.
      * Fehlermeldung bei ERROR-Status
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PublicKeyResponse.Builder clearErrorMessage() {
      errorMessage = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PublicKeyResponse build() {
      try {
        PublicKeyResponse record = new PublicKeyResponse();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.String) defaultValue(fields()[0]);
        record.status = fieldSetFlags()[1] ? this.status : (de.mhus.nimbus.shared.avro.PublicKeyStatus) defaultValue(fields()[1]);
        record.publicKey = fieldSetFlags()[2] ? this.publicKey : (java.lang.String) defaultValue(fields()[2]);
        record.keyType = fieldSetFlags()[3] ? this.keyType : (java.lang.String) defaultValue(fields()[3]);
        record.algorithm = fieldSetFlags()[4] ? this.algorithm : (java.lang.String) defaultValue(fields()[4]);
        record.issuer = fieldSetFlags()[5] ? this.issuer : (java.lang.String) defaultValue(fields()[5]);
        record.timestamp = fieldSetFlags()[6] ? this.timestamp : (java.time.Instant) defaultValue(fields()[6]);
        record.errorMessage = fieldSetFlags()[7] ? this.errorMessage : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PublicKeyResponse>
    WRITER$ = (org.apache.avro.io.DatumWriter<PublicKeyResponse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PublicKeyResponse>
    READER$ = (org.apache.avro.io.DatumReader<PublicKeyResponse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










