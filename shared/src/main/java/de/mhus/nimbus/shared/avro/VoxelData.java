/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class VoxelData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -685996669304553361L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VoxelData\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"fields\":[{\"name\":\"x\",\"type\":\"int\"},{\"name\":\"y\",\"type\":\"int\"},{\"name\":\"z\",\"type\":\"int\"},{\"name\":\"data\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<VoxelData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<VoxelData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<VoxelData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<VoxelData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<VoxelData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this VoxelData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a VoxelData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a VoxelData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static VoxelData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int x;
  private int y;
  private int z;
  private java.lang.String data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VoxelData() {}

  /**
   * All-args constructor.
   * @param x The new value for x
   * @param y The new value for y
   * @param z The new value for z
   * @param data The new value for data
   */
  public VoxelData(java.lang.Integer x, java.lang.Integer y, java.lang.Integer z, java.lang.String data) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.data = data;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return x;
    case 1: return y;
    case 2: return z;
    case 3: return data;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: x = (java.lang.Integer)value$; break;
    case 1: y = (java.lang.Integer)value$; break;
    case 2: z = (java.lang.Integer)value$; break;
    case 3: data = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'x' field.
   * @return The value of the 'x' field.
   */
  public int getX() {
    return x;
  }


  /**
   * Sets the value of the 'x' field.
   * @param value the value to set.
   */
  public void setX(int value) {
    this.x = value;
  }

  /**
   * Gets the value of the 'y' field.
   * @return The value of the 'y' field.
   */
  public int getY() {
    return y;
  }


  /**
   * Sets the value of the 'y' field.
   * @param value the value to set.
   */
  public void setY(int value) {
    this.y = value;
  }

  /**
   * Gets the value of the 'z' field.
   * @return The value of the 'z' field.
   */
  public int getZ() {
    return z;
  }


  /**
   * Sets the value of the 'z' field.
   * @param value the value to set.
   */
  public void setZ(int value) {
    this.z = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.lang.String getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.lang.String value) {
    this.data = value;
  }

  /**
   * Creates a new VoxelData RecordBuilder.
   * @return A new VoxelData RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.VoxelData.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.VoxelData.Builder();
  }

  /**
   * Creates a new VoxelData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VoxelData RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.VoxelData.Builder newBuilder(de.mhus.nimbus.shared.avro.VoxelData.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.VoxelData.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.VoxelData.Builder(other);
    }
  }

  /**
   * Creates a new VoxelData RecordBuilder by copying an existing VoxelData instance.
   * @param other The existing instance to copy.
   * @return A new VoxelData RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.VoxelData.Builder newBuilder(de.mhus.nimbus.shared.avro.VoxelData other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.VoxelData.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.VoxelData.Builder(other);
    }
  }

  /**
   * RecordBuilder for VoxelData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VoxelData>
    implements org.apache.avro.data.RecordBuilder<VoxelData> {

    private int x;
    private int y;
    private int z;
    private java.lang.String data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.VoxelData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.x)) {
        this.x = data().deepCopy(fields()[0].schema(), other.x);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.y)) {
        this.y = data().deepCopy(fields()[1].schema(), other.y);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.z)) {
        this.z = data().deepCopy(fields()[2].schema(), other.z);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing VoxelData instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.VoxelData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.x)) {
        this.x = data().deepCopy(fields()[0].schema(), other.x);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.y)) {
        this.y = data().deepCopy(fields()[1].schema(), other.y);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.z)) {
        this.z = data().deepCopy(fields()[2].schema(), other.z);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'x' field.
      * @return The value.
      */
    public int getX() {
      return x;
    }


    /**
      * Sets the value of the 'x' field.
      * @param value The value of 'x'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.VoxelData.Builder setX(int value) {
      validate(fields()[0], value);
      this.x = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'x' field has been set.
      * @return True if the 'x' field has been set, false otherwise.
      */
    public boolean hasX() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'x' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.VoxelData.Builder clearX() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'y' field.
      * @return The value.
      */
    public int getY() {
      return y;
    }


    /**
      * Sets the value of the 'y' field.
      * @param value The value of 'y'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.VoxelData.Builder setY(int value) {
      validate(fields()[1], value);
      this.y = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'y' field has been set.
      * @return True if the 'y' field has been set, false otherwise.
      */
    public boolean hasY() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'y' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.VoxelData.Builder clearY() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'z' field.
      * @return The value.
      */
    public int getZ() {
      return z;
    }


    /**
      * Sets the value of the 'z' field.
      * @param value The value of 'z'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.VoxelData.Builder setZ(int value) {
      validate(fields()[2], value);
      this.z = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'z' field has been set.
      * @return True if the 'z' field has been set, false otherwise.
      */
    public boolean hasZ() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'z' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.VoxelData.Builder clearZ() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.lang.String getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.VoxelData.Builder setData(java.lang.String value) {
      validate(fields()[3], value);
      this.data = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.VoxelData.Builder clearData() {
      data = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public VoxelData build() {
      try {
        VoxelData record = new VoxelData();
        record.x = fieldSetFlags()[0] ? this.x : (java.lang.Integer) defaultValue(fields()[0]);
        record.y = fieldSetFlags()[1] ? this.y : (java.lang.Integer) defaultValue(fields()[1]);
        record.z = fieldSetFlags()[2] ? this.z : (java.lang.Integer) defaultValue(fields()[2]);
        record.data = fieldSetFlags()[3] ? this.data : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<VoxelData>
    WRITER$ = (org.apache.avro.io.DatumWriter<VoxelData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<VoxelData>
    READER$ = (org.apache.avro.io.DatumReader<VoxelData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.x);

    out.writeInt(this.y);

    out.writeInt(this.z);

    if (this.data == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.data);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.x = in.readInt();

      this.y = in.readInt();

      this.z = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.data = null;
      } else {
        this.data = in.readString();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.x = in.readInt();
          break;

        case 1:
          this.y = in.readInt();
          break;

        case 2:
          this.z = in.readInt();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.data = null;
          } else {
            this.data = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










