/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema für Lookup-Anfragen im Nimbus Registry System */
@org.apache.avro.specific.AvroGenerated
public class LookupRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5808110593419116987L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LookupRequest\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"doc\":\"Schema für Lookup-Anfragen im Nimbus Registry System\",\"fields\":[{\"name\":\"requestId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Eindeutige ID der Lookup-Anfrage\"},{\"name\":\"service\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name des gesuchten Services\"},{\"name\":\"version\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Gewünschte Version des Services (optional)\",\"default\":null},{\"name\":\"environment\",\"type\":{\"type\":\"enum\",\"name\":\"Environment\",\"symbols\":[\"DEV\",\"TEST\",\"STAGING\",\"PROD\"]},\"doc\":\"Umgebung für die Lookup-Anfrage\",\"default\":\"DEV\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Zeitstempel der Anfrage in Millisekunden\"},{\"name\":\"metadata\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"Zusätzliche Metadaten für die Anfrage\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<LookupRequest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LookupRequest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LookupRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LookupRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LookupRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LookupRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LookupRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LookupRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LookupRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Eindeutige ID der Lookup-Anfrage */
  private java.lang.String requestId;
  /** Name des gesuchten Services */
  private java.lang.String service;
  /** Gewünschte Version des Services (optional) */
  private java.lang.String version;
  /** Umgebung für die Lookup-Anfrage */
  private de.mhus.nimbus.shared.avro.Environment environment;
  /** Zeitstempel der Anfrage in Millisekunden */
  private java.time.Instant timestamp;
  /** Zusätzliche Metadaten für die Anfrage */
  private java.util.Map<java.lang.String,java.lang.String> metadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LookupRequest() {}

  /**
   * All-args constructor.
   * @param requestId Eindeutige ID der Lookup-Anfrage
   * @param service Name des gesuchten Services
   * @param version Gewünschte Version des Services (optional)
   * @param environment Umgebung für die Lookup-Anfrage
   * @param timestamp Zeitstempel der Anfrage in Millisekunden
   * @param metadata Zusätzliche Metadaten für die Anfrage
   */
  public LookupRequest(java.lang.String requestId, java.lang.String service, java.lang.String version, de.mhus.nimbus.shared.avro.Environment environment, java.time.Instant timestamp, java.util.Map<java.lang.String,java.lang.String> metadata) {
    this.requestId = requestId;
    this.service = service;
    this.version = version;
    this.environment = environment;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.metadata = metadata;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return service;
    case 2: return version;
    case 3: return environment;
    case 4: return timestamp;
    case 5: return metadata;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = value$ != null ? value$.toString() : null; break;
    case 1: service = value$ != null ? value$.toString() : null; break;
    case 2: version = value$ != null ? value$.toString() : null; break;
    case 3: environment = (de.mhus.nimbus.shared.avro.Environment)value$; break;
    case 4: timestamp = (java.time.Instant)value$; break;
    case 5: metadata = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return Eindeutige ID der Lookup-Anfrage
   */
  public java.lang.String getRequestId() {
    return requestId;
  }



  /**
   * Gets the value of the 'service' field.
   * @return Name des gesuchten Services
   */
  public java.lang.String getService() {
    return service;
  }



  /**
   * Gets the value of the 'version' field.
   * @return Gewünschte Version des Services (optional)
   */
  public java.lang.String getVersion() {
    return version;
  }



  /**
   * Gets the value of the 'environment' field.
   * @return Umgebung für die Lookup-Anfrage
   */
  public de.mhus.nimbus.shared.avro.Environment getEnvironment() {
    return environment;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return Zeitstempel der Anfrage in Millisekunden
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }



  /**
   * Gets the value of the 'metadata' field.
   * @return Zusätzliche Metadaten für die Anfrage
   */
  public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
    return metadata;
  }



  /**
   * Creates a new LookupRequest RecordBuilder.
   * @return A new LookupRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.LookupRequest.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.LookupRequest.Builder();
  }

  /**
   * Creates a new LookupRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LookupRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.LookupRequest.Builder newBuilder(de.mhus.nimbus.shared.avro.LookupRequest.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.LookupRequest.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.LookupRequest.Builder(other);
    }
  }

  /**
   * Creates a new LookupRequest RecordBuilder by copying an existing LookupRequest instance.
   * @param other The existing instance to copy.
   * @return A new LookupRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.LookupRequest.Builder newBuilder(de.mhus.nimbus.shared.avro.LookupRequest other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.LookupRequest.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.LookupRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for LookupRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LookupRequest>
    implements org.apache.avro.data.RecordBuilder<LookupRequest> {

    /** Eindeutige ID der Lookup-Anfrage */
    private java.lang.String requestId;
    /** Name des gesuchten Services */
    private java.lang.String service;
    /** Gewünschte Version des Services (optional) */
    private java.lang.String version;
    /** Umgebung für die Lookup-Anfrage */
    private de.mhus.nimbus.shared.avro.Environment environment;
    /** Zeitstempel der Anfrage in Millisekunden */
    private java.time.Instant timestamp;
    /** Zusätzliche Metadaten für die Anfrage */
    private java.util.Map<java.lang.String,java.lang.String> metadata;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.LookupRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.service)) {
        this.service = data().deepCopy(fields()[1].schema(), other.service);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.environment)) {
        this.environment = data().deepCopy(fields()[3].schema(), other.environment);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.metadata)) {
        this.metadata = data().deepCopy(fields()[5].schema(), other.metadata);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing LookupRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.LookupRequest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.service)) {
        this.service = data().deepCopy(fields()[1].schema(), other.service);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.environment)) {
        this.environment = data().deepCopy(fields()[3].schema(), other.environment);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.metadata)) {
        this.metadata = data().deepCopy(fields()[5].schema(), other.metadata);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'requestId' field.
      * Eindeutige ID der Lookup-Anfrage
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * Eindeutige ID der Lookup-Anfrage
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LookupRequest.Builder setRequestId(java.lang.String value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * Eindeutige ID der Lookup-Anfrage
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestId' field.
      * Eindeutige ID der Lookup-Anfrage
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LookupRequest.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'service' field.
      * Name des gesuchten Services
      * @return The value.
      */
    public java.lang.String getService() {
      return service;
    }


    /**
      * Sets the value of the 'service' field.
      * Name des gesuchten Services
      * @param value The value of 'service'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LookupRequest.Builder setService(java.lang.String value) {
      validate(fields()[1], value);
      this.service = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'service' field has been set.
      * Name des gesuchten Services
      * @return True if the 'service' field has been set, false otherwise.
      */
    public boolean hasService() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'service' field.
      * Name des gesuchten Services
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LookupRequest.Builder clearService() {
      service = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * Gewünschte Version des Services (optional)
      * @return The value.
      */
    public java.lang.String getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * Gewünschte Version des Services (optional)
      * @param value The value of 'version'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LookupRequest.Builder setVersion(java.lang.String value) {
      validate(fields()[2], value);
      this.version = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * Gewünschte Version des Services (optional)
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'version' field.
      * Gewünschte Version des Services (optional)
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LookupRequest.Builder clearVersion() {
      version = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'environment' field.
      * Umgebung für die Lookup-Anfrage
      * @return The value.
      */
    public de.mhus.nimbus.shared.avro.Environment getEnvironment() {
      return environment;
    }


    /**
      * Sets the value of the 'environment' field.
      * Umgebung für die Lookup-Anfrage
      * @param value The value of 'environment'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LookupRequest.Builder setEnvironment(de.mhus.nimbus.shared.avro.Environment value) {
      validate(fields()[3], value);
      this.environment = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'environment' field has been set.
      * Umgebung für die Lookup-Anfrage
      * @return True if the 'environment' field has been set, false otherwise.
      */
    public boolean hasEnvironment() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'environment' field.
      * Umgebung für die Lookup-Anfrage
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LookupRequest.Builder clearEnvironment() {
      environment = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Zeitstempel der Anfrage in Millisekunden
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Zeitstempel der Anfrage in Millisekunden
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LookupRequest.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[4], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Zeitstempel der Anfrage in Millisekunden
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Zeitstempel der Anfrage in Millisekunden
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LookupRequest.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * Zusätzliche Metadaten für die Anfrage
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * Zusätzliche Metadaten für die Anfrage
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LookupRequest.Builder setMetadata(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[5], value);
      this.metadata = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * Zusätzliche Metadaten für die Anfrage
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'metadata' field.
      * Zusätzliche Metadaten für die Anfrage
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LookupRequest.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LookupRequest build() {
      try {
        LookupRequest record = new LookupRequest();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.String) defaultValue(fields()[0]);
        record.service = fieldSetFlags()[1] ? this.service : (java.lang.String) defaultValue(fields()[1]);
        record.version = fieldSetFlags()[2] ? this.version : (java.lang.String) defaultValue(fields()[2]);
        record.environment = fieldSetFlags()[3] ? this.environment : (de.mhus.nimbus.shared.avro.Environment) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.time.Instant) defaultValue(fields()[4]);
        record.metadata = fieldSetFlags()[5] ? this.metadata : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LookupRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<LookupRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LookupRequest>
    READER$ = (org.apache.avro.io.DatumReader<LookupRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










