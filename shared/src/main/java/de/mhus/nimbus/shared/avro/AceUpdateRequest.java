/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Request to update an existing Access Control Entity */
@org.apache.avro.specific.AvroGenerated
public class AceUpdateRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7664077516819726087L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AceUpdateRequest\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"doc\":\"Request to update an existing Access Control Entity\",\"fields\":[{\"name\":\"requestId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier for this request\"},{\"name\":\"aceId\",\"type\":\"long\",\"doc\":\"The ID of the ACE to update\"},{\"name\":\"rule\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"New rule (if updating)\",\"default\":null},{\"name\":\"orderValue\",\"type\":[\"null\",\"int\"],\"doc\":\"New order value (if updating)\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"New description (if updating)\",\"default\":null},{\"name\":\"active\",\"type\":[\"null\",\"boolean\"],\"doc\":\"New active status (if updating)\",\"default\":null},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Timestamp when the request was created\"},{\"name\":\"requestedBy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Who requested this operation\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<AceUpdateRequest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AceUpdateRequest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AceUpdateRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AceUpdateRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AceUpdateRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AceUpdateRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AceUpdateRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AceUpdateRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AceUpdateRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for this request */
  private java.lang.String requestId;
  /** The ID of the ACE to update */
  private long aceId;
  /** New rule (if updating) */
  private java.lang.String rule;
  /** New order value (if updating) */
  private java.lang.Integer orderValue;
  /** New description (if updating) */
  private java.lang.String description;
  /** New active status (if updating) */
  private java.lang.Boolean active;
  /** Timestamp when the request was created */
  private java.time.Instant timestamp;
  /** Who requested this operation */
  private java.lang.String requestedBy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AceUpdateRequest() {}

  /**
   * All-args constructor.
   * @param requestId Unique identifier for this request
   * @param aceId The ID of the ACE to update
   * @param rule New rule (if updating)
   * @param orderValue New order value (if updating)
   * @param description New description (if updating)
   * @param active New active status (if updating)
   * @param timestamp Timestamp when the request was created
   * @param requestedBy Who requested this operation
   */
  public AceUpdateRequest(java.lang.String requestId, java.lang.Long aceId, java.lang.String rule, java.lang.Integer orderValue, java.lang.String description, java.lang.Boolean active, java.time.Instant timestamp, java.lang.String requestedBy) {
    this.requestId = requestId;
    this.aceId = aceId;
    this.rule = rule;
    this.orderValue = orderValue;
    this.description = description;
    this.active = active;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.requestedBy = requestedBy;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return aceId;
    case 2: return rule;
    case 3: return orderValue;
    case 4: return description;
    case 5: return active;
    case 6: return timestamp;
    case 7: return requestedBy;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = value$ != null ? value$.toString() : null; break;
    case 1: aceId = (java.lang.Long)value$; break;
    case 2: rule = value$ != null ? value$.toString() : null; break;
    case 3: orderValue = (java.lang.Integer)value$; break;
    case 4: description = value$ != null ? value$.toString() : null; break;
    case 5: active = (java.lang.Boolean)value$; break;
    case 6: timestamp = (java.time.Instant)value$; break;
    case 7: requestedBy = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return Unique identifier for this request
   */
  public java.lang.String getRequestId() {
    return requestId;
  }


  /**
   * Sets the value of the 'requestId' field.
   * Unique identifier for this request
   * @param value the value to set.
   */
  public void setRequestId(java.lang.String value) {
    this.requestId = value;
  }

  /**
   * Gets the value of the 'aceId' field.
   * @return The ID of the ACE to update
   */
  public long getAceId() {
    return aceId;
  }


  /**
   * Sets the value of the 'aceId' field.
   * The ID of the ACE to update
   * @param value the value to set.
   */
  public void setAceId(long value) {
    this.aceId = value;
  }

  /**
   * Gets the value of the 'rule' field.
   * @return New rule (if updating)
   */
  public java.lang.String getRule() {
    return rule;
  }


  /**
   * Sets the value of the 'rule' field.
   * New rule (if updating)
   * @param value the value to set.
   */
  public void setRule(java.lang.String value) {
    this.rule = value;
  }

  /**
   * Gets the value of the 'orderValue' field.
   * @return New order value (if updating)
   */
  public java.lang.Integer getOrderValue() {
    return orderValue;
  }


  /**
   * Sets the value of the 'orderValue' field.
   * New order value (if updating)
   * @param value the value to set.
   */
  public void setOrderValue(java.lang.Integer value) {
    this.orderValue = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return New description (if updating)
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * New description (if updating)
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'active' field.
   * @return New active status (if updating)
   */
  public java.lang.Boolean getActive() {
    return active;
  }


  /**
   * Sets the value of the 'active' field.
   * New active status (if updating)
   * @param value the value to set.
   */
  public void setActive(java.lang.Boolean value) {
    this.active = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp when the request was created
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp when the request was created
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'requestedBy' field.
   * @return Who requested this operation
   */
  public java.lang.String getRequestedBy() {
    return requestedBy;
  }


  /**
   * Sets the value of the 'requestedBy' field.
   * Who requested this operation
   * @param value the value to set.
   */
  public void setRequestedBy(java.lang.String value) {
    this.requestedBy = value;
  }

  /**
   * Creates a new AceUpdateRequest RecordBuilder.
   * @return A new AceUpdateRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder();
  }

  /**
   * Creates a new AceUpdateRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AceUpdateRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder newBuilder(de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder(other);
    }
  }

  /**
   * Creates a new AceUpdateRequest RecordBuilder by copying an existing AceUpdateRequest instance.
   * @param other The existing instance to copy.
   * @return A new AceUpdateRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder newBuilder(de.mhus.nimbus.shared.avro.AceUpdateRequest other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for AceUpdateRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AceUpdateRequest>
    implements org.apache.avro.data.RecordBuilder<AceUpdateRequest> {

    /** Unique identifier for this request */
    private java.lang.String requestId;
    /** The ID of the ACE to update */
    private long aceId;
    /** New rule (if updating) */
    private java.lang.String rule;
    /** New order value (if updating) */
    private java.lang.Integer orderValue;
    /** New description (if updating) */
    private java.lang.String description;
    /** New active status (if updating) */
    private java.lang.Boolean active;
    /** Timestamp when the request was created */
    private java.time.Instant timestamp;
    /** Who requested this operation */
    private java.lang.String requestedBy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.aceId)) {
        this.aceId = data().deepCopy(fields()[1].schema(), other.aceId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.rule)) {
        this.rule = data().deepCopy(fields()[2].schema(), other.rule);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.orderValue)) {
        this.orderValue = data().deepCopy(fields()[3].schema(), other.orderValue);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.active)) {
        this.active = data().deepCopy(fields()[5].schema(), other.active);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.requestedBy)) {
        this.requestedBy = data().deepCopy(fields()[7].schema(), other.requestedBy);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing AceUpdateRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.AceUpdateRequest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aceId)) {
        this.aceId = data().deepCopy(fields()[1].schema(), other.aceId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rule)) {
        this.rule = data().deepCopy(fields()[2].schema(), other.rule);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orderValue)) {
        this.orderValue = data().deepCopy(fields()[3].schema(), other.orderValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.active)) {
        this.active = data().deepCopy(fields()[5].schema(), other.active);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.requestedBy)) {
        this.requestedBy = data().deepCopy(fields()[7].schema(), other.requestedBy);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'requestId' field.
      * Unique identifier for this request
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * Unique identifier for this request
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder setRequestId(java.lang.String value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * Unique identifier for this request
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestId' field.
      * Unique identifier for this request
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'aceId' field.
      * The ID of the ACE to update
      * @return The value.
      */
    public long getAceId() {
      return aceId;
    }


    /**
      * Sets the value of the 'aceId' field.
      * The ID of the ACE to update
      * @param value The value of 'aceId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder setAceId(long value) {
      validate(fields()[1], value);
      this.aceId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'aceId' field has been set.
      * The ID of the ACE to update
      * @return True if the 'aceId' field has been set, false otherwise.
      */
    public boolean hasAceId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'aceId' field.
      * The ID of the ACE to update
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder clearAceId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rule' field.
      * New rule (if updating)
      * @return The value.
      */
    public java.lang.String getRule() {
      return rule;
    }


    /**
      * Sets the value of the 'rule' field.
      * New rule (if updating)
      * @param value The value of 'rule'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder setRule(java.lang.String value) {
      validate(fields()[2], value);
      this.rule = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'rule' field has been set.
      * New rule (if updating)
      * @return True if the 'rule' field has been set, false otherwise.
      */
    public boolean hasRule() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'rule' field.
      * New rule (if updating)
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder clearRule() {
      rule = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderValue' field.
      * New order value (if updating)
      * @return The value.
      */
    public java.lang.Integer getOrderValue() {
      return orderValue;
    }


    /**
      * Sets the value of the 'orderValue' field.
      * New order value (if updating)
      * @param value The value of 'orderValue'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder setOrderValue(java.lang.Integer value) {
      validate(fields()[3], value);
      this.orderValue = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'orderValue' field has been set.
      * New order value (if updating)
      * @return True if the 'orderValue' field has been set, false otherwise.
      */
    public boolean hasOrderValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'orderValue' field.
      * New order value (if updating)
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder clearOrderValue() {
      orderValue = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * New description (if updating)
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * New description (if updating)
      * @param value The value of 'description'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder setDescription(java.lang.String value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * New description (if updating)
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * New description (if updating)
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'active' field.
      * New active status (if updating)
      * @return The value.
      */
    public java.lang.Boolean getActive() {
      return active;
    }


    /**
      * Sets the value of the 'active' field.
      * New active status (if updating)
      * @param value The value of 'active'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder setActive(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.active = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'active' field has been set.
      * New active status (if updating)
      * @return True if the 'active' field has been set, false otherwise.
      */
    public boolean hasActive() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'active' field.
      * New active status (if updating)
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder clearActive() {
      active = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp when the request was created
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp when the request was created
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[6], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp when the request was created
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp when the request was created
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder clearTimestamp() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestedBy' field.
      * Who requested this operation
      * @return The value.
      */
    public java.lang.String getRequestedBy() {
      return requestedBy;
    }


    /**
      * Sets the value of the 'requestedBy' field.
      * Who requested this operation
      * @param value The value of 'requestedBy'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder setRequestedBy(java.lang.String value) {
      validate(fields()[7], value);
      this.requestedBy = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'requestedBy' field has been set.
      * Who requested this operation
      * @return True if the 'requestedBy' field has been set, false otherwise.
      */
    public boolean hasRequestedBy() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'requestedBy' field.
      * Who requested this operation
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceUpdateRequest.Builder clearRequestedBy() {
      requestedBy = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AceUpdateRequest build() {
      try {
        AceUpdateRequest record = new AceUpdateRequest();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.String) defaultValue(fields()[0]);
        record.aceId = fieldSetFlags()[1] ? this.aceId : (java.lang.Long) defaultValue(fields()[1]);
        record.rule = fieldSetFlags()[2] ? this.rule : (java.lang.String) defaultValue(fields()[2]);
        record.orderValue = fieldSetFlags()[3] ? this.orderValue : (java.lang.Integer) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.String) defaultValue(fields()[4]);
        record.active = fieldSetFlags()[5] ? this.active : (java.lang.Boolean) defaultValue(fields()[5]);
        record.timestamp = fieldSetFlags()[6] ? this.timestamp : (java.time.Instant) defaultValue(fields()[6]);
        record.requestedBy = fieldSetFlags()[7] ? this.requestedBy : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AceUpdateRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<AceUpdateRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AceUpdateRequest>
    READER$ = (org.apache.avro.io.DatumReader<AceUpdateRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










