/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema für Login-Anfragen im Nimbus Identity System */
@org.apache.avro.specific.AvroGenerated
public class LoginRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4581143382383933456L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LoginRequest\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"doc\":\"Schema für Login-Anfragen im Nimbus Identity System\",\"fields\":[{\"name\":\"requestId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Eindeutige ID der Login-Anfrage\"},{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Benutzername oder E-Mail-Adresse\"},{\"name\":\"password\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Passwort des Benutzers\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Zeitstempel der Anfrage in Millisekunden\"},{\"name\":\"clientInfo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Informationen über den Client (optional)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<LoginRequest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LoginRequest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LoginRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LoginRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LoginRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LoginRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LoginRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LoginRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LoginRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Eindeutige ID der Login-Anfrage */
  private java.lang.String requestId;
  /** Benutzername oder E-Mail-Adresse */
  private java.lang.String username;
  /** Passwort des Benutzers */
  private java.lang.String password;
  /** Zeitstempel der Anfrage in Millisekunden */
  private java.time.Instant timestamp;
  /** Informationen über den Client (optional) */
  private java.lang.String clientInfo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LoginRequest() {}

  /**
   * All-args constructor.
   * @param requestId Eindeutige ID der Login-Anfrage
   * @param username Benutzername oder E-Mail-Adresse
   * @param password Passwort des Benutzers
   * @param timestamp Zeitstempel der Anfrage in Millisekunden
   * @param clientInfo Informationen über den Client (optional)
   */
  public LoginRequest(java.lang.String requestId, java.lang.String username, java.lang.String password, java.time.Instant timestamp, java.lang.String clientInfo) {
    this.requestId = requestId;
    this.username = username;
    this.password = password;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.clientInfo = clientInfo;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return username;
    case 2: return password;
    case 3: return timestamp;
    case 4: return clientInfo;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = value$ != null ? value$.toString() : null; break;
    case 1: username = value$ != null ? value$.toString() : null; break;
    case 2: password = value$ != null ? value$.toString() : null; break;
    case 3: timestamp = (java.time.Instant)value$; break;
    case 4: clientInfo = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return Eindeutige ID der Login-Anfrage
   */
  public java.lang.String getRequestId() {
    return requestId;
  }



  /**
   * Gets the value of the 'username' field.
   * @return Benutzername oder E-Mail-Adresse
   */
  public java.lang.String getUsername() {
    return username;
  }



  /**
   * Gets the value of the 'password' field.
   * @return Passwort des Benutzers
   */
  public java.lang.String getPassword() {
    return password;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return Zeitstempel der Anfrage in Millisekunden
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }



  /**
   * Gets the value of the 'clientInfo' field.
   * @return Informationen über den Client (optional)
   */
  public java.lang.String getClientInfo() {
    return clientInfo;
  }



  /**
   * Creates a new LoginRequest RecordBuilder.
   * @return A new LoginRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.LoginRequest.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.LoginRequest.Builder();
  }

  /**
   * Creates a new LoginRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LoginRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.LoginRequest.Builder newBuilder(de.mhus.nimbus.shared.avro.LoginRequest.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.LoginRequest.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.LoginRequest.Builder(other);
    }
  }

  /**
   * Creates a new LoginRequest RecordBuilder by copying an existing LoginRequest instance.
   * @param other The existing instance to copy.
   * @return A new LoginRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.LoginRequest.Builder newBuilder(de.mhus.nimbus.shared.avro.LoginRequest other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.LoginRequest.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.LoginRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for LoginRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LoginRequest>
    implements org.apache.avro.data.RecordBuilder<LoginRequest> {

    /** Eindeutige ID der Login-Anfrage */
    private java.lang.String requestId;
    /** Benutzername oder E-Mail-Adresse */
    private java.lang.String username;
    /** Passwort des Benutzers */
    private java.lang.String password;
    /** Zeitstempel der Anfrage in Millisekunden */
    private java.time.Instant timestamp;
    /** Informationen über den Client (optional) */
    private java.lang.String clientInfo;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.LoginRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.password)) {
        this.password = data().deepCopy(fields()[2].schema(), other.password);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.clientInfo)) {
        this.clientInfo = data().deepCopy(fields()[4].schema(), other.clientInfo);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing LoginRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.LoginRequest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.password)) {
        this.password = data().deepCopy(fields()[2].schema(), other.password);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.clientInfo)) {
        this.clientInfo = data().deepCopy(fields()[4].schema(), other.clientInfo);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'requestId' field.
      * Eindeutige ID der Login-Anfrage
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * Eindeutige ID der Login-Anfrage
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LoginRequest.Builder setRequestId(java.lang.String value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * Eindeutige ID der Login-Anfrage
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestId' field.
      * Eindeutige ID der Login-Anfrage
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LoginRequest.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * Benutzername oder E-Mail-Adresse
      * @return The value.
      */
    public java.lang.String getUsername() {
      return username;
    }


    /**
      * Sets the value of the 'username' field.
      * Benutzername oder E-Mail-Adresse
      * @param value The value of 'username'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LoginRequest.Builder setUsername(java.lang.String value) {
      validate(fields()[1], value);
      this.username = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * Benutzername oder E-Mail-Adresse
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'username' field.
      * Benutzername oder E-Mail-Adresse
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LoginRequest.Builder clearUsername() {
      username = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'password' field.
      * Passwort des Benutzers
      * @return The value.
      */
    public java.lang.String getPassword() {
      return password;
    }


    /**
      * Sets the value of the 'password' field.
      * Passwort des Benutzers
      * @param value The value of 'password'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LoginRequest.Builder setPassword(java.lang.String value) {
      validate(fields()[2], value);
      this.password = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'password' field has been set.
      * Passwort des Benutzers
      * @return True if the 'password' field has been set, false otherwise.
      */
    public boolean hasPassword() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'password' field.
      * Passwort des Benutzers
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LoginRequest.Builder clearPassword() {
      password = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Zeitstempel der Anfrage in Millisekunden
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Zeitstempel der Anfrage in Millisekunden
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LoginRequest.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[3], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Zeitstempel der Anfrage in Millisekunden
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Zeitstempel der Anfrage in Millisekunden
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LoginRequest.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientInfo' field.
      * Informationen über den Client (optional)
      * @return The value.
      */
    public java.lang.String getClientInfo() {
      return clientInfo;
    }


    /**
      * Sets the value of the 'clientInfo' field.
      * Informationen über den Client (optional)
      * @param value The value of 'clientInfo'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LoginRequest.Builder setClientInfo(java.lang.String value) {
      validate(fields()[4], value);
      this.clientInfo = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'clientInfo' field has been set.
      * Informationen über den Client (optional)
      * @return True if the 'clientInfo' field has been set, false otherwise.
      */
    public boolean hasClientInfo() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'clientInfo' field.
      * Informationen über den Client (optional)
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.LoginRequest.Builder clearClientInfo() {
      clientInfo = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LoginRequest build() {
      try {
        LoginRequest record = new LoginRequest();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.String) defaultValue(fields()[0]);
        record.username = fieldSetFlags()[1] ? this.username : (java.lang.String) defaultValue(fields()[1]);
        record.password = fieldSetFlags()[2] ? this.password : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.time.Instant) defaultValue(fields()[3]);
        record.clientInfo = fieldSetFlags()[4] ? this.clientInfo : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LoginRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<LoginRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LoginRequest>
    READER$ = (org.apache.avro.io.DatumReader<LoginRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










