/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema für World-Registrierungs-Anfragen im Nimbus Registry System */
@org.apache.avro.specific.AvroGenerated
public class WorldRegistrationRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4954864524524707302L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WorldRegistrationRequest\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"doc\":\"Schema für World-Registrierungs-Anfragen im Nimbus Registry System\",\"fields\":[{\"name\":\"requestId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Eindeutige ID der World-Registrierungs-Anfrage\"},{\"name\":\"planetName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name des Planeten, auf dem die Welt registriert werden soll\"},{\"name\":\"worldId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Eindeutige ID der zu registrierenden Welt\"},{\"name\":\"worldName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name der zu registrierenden Welt\"},{\"name\":\"environment\",\"type\":{\"type\":\"enum\",\"name\":\"Environment\",\"symbols\":[\"DEV\",\"TEST\",\"STAGING\",\"PROD\"]},\"doc\":\"Umgebung für die World-Registrierung\",\"default\":\"DEV\"},{\"name\":\"managementUrl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"URL des Management-Services für diese Welt\"},{\"name\":\"apiUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"API-URL für diese Welt\",\"default\":null},{\"name\":\"webUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Web-URL für diese Welt\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Beschreibung der Welt\",\"default\":null},{\"name\":\"worldType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Typ der Welt (z.B. settlement, cantina, temple)\",\"default\":null},{\"name\":\"accessLevel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Zugangsebene (public, private, restricted)\",\"default\":null},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Zeitstempel der Anfrage in Millisekunden\"},{\"name\":\"registeredBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Benutzer oder Service, der die Registrierung durchführt\",\"default\":null},{\"name\":\"metadata\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"Zusätzliche Metadaten für die World-Registrierung\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<WorldRegistrationRequest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WorldRegistrationRequest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WorldRegistrationRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WorldRegistrationRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WorldRegistrationRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WorldRegistrationRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WorldRegistrationRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WorldRegistrationRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WorldRegistrationRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Eindeutige ID der World-Registrierungs-Anfrage */
  private java.lang.String requestId;
  /** Name des Planeten, auf dem die Welt registriert werden soll */
  private java.lang.String planetName;
  /** Eindeutige ID der zu registrierenden Welt */
  private java.lang.String worldId;
  /** Name der zu registrierenden Welt */
  private java.lang.String worldName;
  /** Umgebung für die World-Registrierung */
  private de.mhus.nimbus.shared.avro.Environment environment;
  /** URL des Management-Services für diese Welt */
  private java.lang.String managementUrl;
  /** API-URL für diese Welt */
  private java.lang.String apiUrl;
  /** Web-URL für diese Welt */
  private java.lang.String webUrl;
  /** Beschreibung der Welt */
  private java.lang.String description;
  /** Typ der Welt (z.B. settlement, cantina, temple) */
  private java.lang.String worldType;
  /** Zugangsebene (public, private, restricted) */
  private java.lang.String accessLevel;
  /** Zeitstempel der Anfrage in Millisekunden */
  private java.time.Instant timestamp;
  /** Benutzer oder Service, der die Registrierung durchführt */
  private java.lang.String registeredBy;
  /** Zusätzliche Metadaten für die World-Registrierung */
  private java.util.Map<java.lang.String,java.lang.String> metadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WorldRegistrationRequest() {}

  /**
   * All-args constructor.
   * @param requestId Eindeutige ID der World-Registrierungs-Anfrage
   * @param planetName Name des Planeten, auf dem die Welt registriert werden soll
   * @param worldId Eindeutige ID der zu registrierenden Welt
   * @param worldName Name der zu registrierenden Welt
   * @param environment Umgebung für die World-Registrierung
   * @param managementUrl URL des Management-Services für diese Welt
   * @param apiUrl API-URL für diese Welt
   * @param webUrl Web-URL für diese Welt
   * @param description Beschreibung der Welt
   * @param worldType Typ der Welt (z.B. settlement, cantina, temple)
   * @param accessLevel Zugangsebene (public, private, restricted)
   * @param timestamp Zeitstempel der Anfrage in Millisekunden
   * @param registeredBy Benutzer oder Service, der die Registrierung durchführt
   * @param metadata Zusätzliche Metadaten für die World-Registrierung
   */
  public WorldRegistrationRequest(java.lang.String requestId, java.lang.String planetName, java.lang.String worldId, java.lang.String worldName, de.mhus.nimbus.shared.avro.Environment environment, java.lang.String managementUrl, java.lang.String apiUrl, java.lang.String webUrl, java.lang.String description, java.lang.String worldType, java.lang.String accessLevel, java.time.Instant timestamp, java.lang.String registeredBy, java.util.Map<java.lang.String,java.lang.String> metadata) {
    this.requestId = requestId;
    this.planetName = planetName;
    this.worldId = worldId;
    this.worldName = worldName;
    this.environment = environment;
    this.managementUrl = managementUrl;
    this.apiUrl = apiUrl;
    this.webUrl = webUrl;
    this.description = description;
    this.worldType = worldType;
    this.accessLevel = accessLevel;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.registeredBy = registeredBy;
    this.metadata = metadata;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return planetName;
    case 2: return worldId;
    case 3: return worldName;
    case 4: return environment;
    case 5: return managementUrl;
    case 6: return apiUrl;
    case 7: return webUrl;
    case 8: return description;
    case 9: return worldType;
    case 10: return accessLevel;
    case 11: return timestamp;
    case 12: return registeredBy;
    case 13: return metadata;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = value$ != null ? value$.toString() : null; break;
    case 1: planetName = value$ != null ? value$.toString() : null; break;
    case 2: worldId = value$ != null ? value$.toString() : null; break;
    case 3: worldName = value$ != null ? value$.toString() : null; break;
    case 4: environment = (de.mhus.nimbus.shared.avro.Environment)value$; break;
    case 5: managementUrl = value$ != null ? value$.toString() : null; break;
    case 6: apiUrl = value$ != null ? value$.toString() : null; break;
    case 7: webUrl = value$ != null ? value$.toString() : null; break;
    case 8: description = value$ != null ? value$.toString() : null; break;
    case 9: worldType = value$ != null ? value$.toString() : null; break;
    case 10: accessLevel = value$ != null ? value$.toString() : null; break;
    case 11: timestamp = (java.time.Instant)value$; break;
    case 12: registeredBy = value$ != null ? value$.toString() : null; break;
    case 13: metadata = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return Eindeutige ID der World-Registrierungs-Anfrage
   */
  public java.lang.String getRequestId() {
    return requestId;
  }



  /**
   * Gets the value of the 'planetName' field.
   * @return Name des Planeten, auf dem die Welt registriert werden soll
   */
  public java.lang.String getPlanetName() {
    return planetName;
  }



  /**
   * Gets the value of the 'worldId' field.
   * @return Eindeutige ID der zu registrierenden Welt
   */
  public java.lang.String getWorldId() {
    return worldId;
  }



  /**
   * Gets the value of the 'worldName' field.
   * @return Name der zu registrierenden Welt
   */
  public java.lang.String getWorldName() {
    return worldName;
  }



  /**
   * Gets the value of the 'environment' field.
   * @return Umgebung für die World-Registrierung
   */
  public de.mhus.nimbus.shared.avro.Environment getEnvironment() {
    return environment;
  }



  /**
   * Gets the value of the 'managementUrl' field.
   * @return URL des Management-Services für diese Welt
   */
  public java.lang.String getManagementUrl() {
    return managementUrl;
  }



  /**
   * Gets the value of the 'apiUrl' field.
   * @return API-URL für diese Welt
   */
  public java.lang.String getApiUrl() {
    return apiUrl;
  }



  /**
   * Gets the value of the 'webUrl' field.
   * @return Web-URL für diese Welt
   */
  public java.lang.String getWebUrl() {
    return webUrl;
  }



  /**
   * Gets the value of the 'description' field.
   * @return Beschreibung der Welt
   */
  public java.lang.String getDescription() {
    return description;
  }



  /**
   * Gets the value of the 'worldType' field.
   * @return Typ der Welt (z.B. settlement, cantina, temple)
   */
  public java.lang.String getWorldType() {
    return worldType;
  }



  /**
   * Gets the value of the 'accessLevel' field.
   * @return Zugangsebene (public, private, restricted)
   */
  public java.lang.String getAccessLevel() {
    return accessLevel;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return Zeitstempel der Anfrage in Millisekunden
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }



  /**
   * Gets the value of the 'registeredBy' field.
   * @return Benutzer oder Service, der die Registrierung durchführt
   */
  public java.lang.String getRegisteredBy() {
    return registeredBy;
  }



  /**
   * Gets the value of the 'metadata' field.
   * @return Zusätzliche Metadaten für die World-Registrierung
   */
  public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
    return metadata;
  }



  /**
   * Creates a new WorldRegistrationRequest RecordBuilder.
   * @return A new WorldRegistrationRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder();
  }

  /**
   * Creates a new WorldRegistrationRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WorldRegistrationRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder newBuilder(de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder(other);
    }
  }

  /**
   * Creates a new WorldRegistrationRequest RecordBuilder by copying an existing WorldRegistrationRequest instance.
   * @param other The existing instance to copy.
   * @return A new WorldRegistrationRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder newBuilder(de.mhus.nimbus.shared.avro.WorldRegistrationRequest other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for WorldRegistrationRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WorldRegistrationRequest>
    implements org.apache.avro.data.RecordBuilder<WorldRegistrationRequest> {

    /** Eindeutige ID der World-Registrierungs-Anfrage */
    private java.lang.String requestId;
    /** Name des Planeten, auf dem die Welt registriert werden soll */
    private java.lang.String planetName;
    /** Eindeutige ID der zu registrierenden Welt */
    private java.lang.String worldId;
    /** Name der zu registrierenden Welt */
    private java.lang.String worldName;
    /** Umgebung für die World-Registrierung */
    private de.mhus.nimbus.shared.avro.Environment environment;
    /** URL des Management-Services für diese Welt */
    private java.lang.String managementUrl;
    /** API-URL für diese Welt */
    private java.lang.String apiUrl;
    /** Web-URL für diese Welt */
    private java.lang.String webUrl;
    /** Beschreibung der Welt */
    private java.lang.String description;
    /** Typ der Welt (z.B. settlement, cantina, temple) */
    private java.lang.String worldType;
    /** Zugangsebene (public, private, restricted) */
    private java.lang.String accessLevel;
    /** Zeitstempel der Anfrage in Millisekunden */
    private java.time.Instant timestamp;
    /** Benutzer oder Service, der die Registrierung durchführt */
    private java.lang.String registeredBy;
    /** Zusätzliche Metadaten für die World-Registrierung */
    private java.util.Map<java.lang.String,java.lang.String> metadata;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.planetName)) {
        this.planetName = data().deepCopy(fields()[1].schema(), other.planetName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.worldId)) {
        this.worldId = data().deepCopy(fields()[2].schema(), other.worldId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.worldName)) {
        this.worldName = data().deepCopy(fields()[3].schema(), other.worldName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.environment)) {
        this.environment = data().deepCopy(fields()[4].schema(), other.environment);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.managementUrl)) {
        this.managementUrl = data().deepCopy(fields()[5].schema(), other.managementUrl);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.apiUrl)) {
        this.apiUrl = data().deepCopy(fields()[6].schema(), other.apiUrl);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.webUrl)) {
        this.webUrl = data().deepCopy(fields()[7].schema(), other.webUrl);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.description)) {
        this.description = data().deepCopy(fields()[8].schema(), other.description);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.worldType)) {
        this.worldType = data().deepCopy(fields()[9].schema(), other.worldType);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.accessLevel)) {
        this.accessLevel = data().deepCopy(fields()[10].schema(), other.accessLevel);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[11].schema(), other.timestamp);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.registeredBy)) {
        this.registeredBy = data().deepCopy(fields()[12].schema(), other.registeredBy);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.metadata)) {
        this.metadata = data().deepCopy(fields()[13].schema(), other.metadata);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing WorldRegistrationRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.WorldRegistrationRequest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.planetName)) {
        this.planetName = data().deepCopy(fields()[1].schema(), other.planetName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.worldId)) {
        this.worldId = data().deepCopy(fields()[2].schema(), other.worldId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.worldName)) {
        this.worldName = data().deepCopy(fields()[3].schema(), other.worldName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.environment)) {
        this.environment = data().deepCopy(fields()[4].schema(), other.environment);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.managementUrl)) {
        this.managementUrl = data().deepCopy(fields()[5].schema(), other.managementUrl);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.apiUrl)) {
        this.apiUrl = data().deepCopy(fields()[6].schema(), other.apiUrl);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.webUrl)) {
        this.webUrl = data().deepCopy(fields()[7].schema(), other.webUrl);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.description)) {
        this.description = data().deepCopy(fields()[8].schema(), other.description);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.worldType)) {
        this.worldType = data().deepCopy(fields()[9].schema(), other.worldType);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.accessLevel)) {
        this.accessLevel = data().deepCopy(fields()[10].schema(), other.accessLevel);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[11].schema(), other.timestamp);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.registeredBy)) {
        this.registeredBy = data().deepCopy(fields()[12].schema(), other.registeredBy);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.metadata)) {
        this.metadata = data().deepCopy(fields()[13].schema(), other.metadata);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'requestId' field.
      * Eindeutige ID der World-Registrierungs-Anfrage
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * Eindeutige ID der World-Registrierungs-Anfrage
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setRequestId(java.lang.String value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * Eindeutige ID der World-Registrierungs-Anfrage
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestId' field.
      * Eindeutige ID der World-Registrierungs-Anfrage
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'planetName' field.
      * Name des Planeten, auf dem die Welt registriert werden soll
      * @return The value.
      */
    public java.lang.String getPlanetName() {
      return planetName;
    }


    /**
      * Sets the value of the 'planetName' field.
      * Name des Planeten, auf dem die Welt registriert werden soll
      * @param value The value of 'planetName'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setPlanetName(java.lang.String value) {
      validate(fields()[1], value);
      this.planetName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'planetName' field has been set.
      * Name des Planeten, auf dem die Welt registriert werden soll
      * @return True if the 'planetName' field has been set, false otherwise.
      */
    public boolean hasPlanetName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'planetName' field.
      * Name des Planeten, auf dem die Welt registriert werden soll
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearPlanetName() {
      planetName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'worldId' field.
      * Eindeutige ID der zu registrierenden Welt
      * @return The value.
      */
    public java.lang.String getWorldId() {
      return worldId;
    }


    /**
      * Sets the value of the 'worldId' field.
      * Eindeutige ID der zu registrierenden Welt
      * @param value The value of 'worldId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setWorldId(java.lang.String value) {
      validate(fields()[2], value);
      this.worldId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'worldId' field has been set.
      * Eindeutige ID der zu registrierenden Welt
      * @return True if the 'worldId' field has been set, false otherwise.
      */
    public boolean hasWorldId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'worldId' field.
      * Eindeutige ID der zu registrierenden Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearWorldId() {
      worldId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'worldName' field.
      * Name der zu registrierenden Welt
      * @return The value.
      */
    public java.lang.String getWorldName() {
      return worldName;
    }


    /**
      * Sets the value of the 'worldName' field.
      * Name der zu registrierenden Welt
      * @param value The value of 'worldName'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setWorldName(java.lang.String value) {
      validate(fields()[3], value);
      this.worldName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'worldName' field has been set.
      * Name der zu registrierenden Welt
      * @return True if the 'worldName' field has been set, false otherwise.
      */
    public boolean hasWorldName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'worldName' field.
      * Name der zu registrierenden Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearWorldName() {
      worldName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'environment' field.
      * Umgebung für die World-Registrierung
      * @return The value.
      */
    public de.mhus.nimbus.shared.avro.Environment getEnvironment() {
      return environment;
    }


    /**
      * Sets the value of the 'environment' field.
      * Umgebung für die World-Registrierung
      * @param value The value of 'environment'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setEnvironment(de.mhus.nimbus.shared.avro.Environment value) {
      validate(fields()[4], value);
      this.environment = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'environment' field has been set.
      * Umgebung für die World-Registrierung
      * @return True if the 'environment' field has been set, false otherwise.
      */
    public boolean hasEnvironment() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'environment' field.
      * Umgebung für die World-Registrierung
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearEnvironment() {
      environment = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'managementUrl' field.
      * URL des Management-Services für diese Welt
      * @return The value.
      */
    public java.lang.String getManagementUrl() {
      return managementUrl;
    }


    /**
      * Sets the value of the 'managementUrl' field.
      * URL des Management-Services für diese Welt
      * @param value The value of 'managementUrl'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setManagementUrl(java.lang.String value) {
      validate(fields()[5], value);
      this.managementUrl = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'managementUrl' field has been set.
      * URL des Management-Services für diese Welt
      * @return True if the 'managementUrl' field has been set, false otherwise.
      */
    public boolean hasManagementUrl() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'managementUrl' field.
      * URL des Management-Services für diese Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearManagementUrl() {
      managementUrl = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'apiUrl' field.
      * API-URL für diese Welt
      * @return The value.
      */
    public java.lang.String getApiUrl() {
      return apiUrl;
    }


    /**
      * Sets the value of the 'apiUrl' field.
      * API-URL für diese Welt
      * @param value The value of 'apiUrl'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setApiUrl(java.lang.String value) {
      validate(fields()[6], value);
      this.apiUrl = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'apiUrl' field has been set.
      * API-URL für diese Welt
      * @return True if the 'apiUrl' field has been set, false otherwise.
      */
    public boolean hasApiUrl() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'apiUrl' field.
      * API-URL für diese Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearApiUrl() {
      apiUrl = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'webUrl' field.
      * Web-URL für diese Welt
      * @return The value.
      */
    public java.lang.String getWebUrl() {
      return webUrl;
    }


    /**
      * Sets the value of the 'webUrl' field.
      * Web-URL für diese Welt
      * @param value The value of 'webUrl'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setWebUrl(java.lang.String value) {
      validate(fields()[7], value);
      this.webUrl = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'webUrl' field has been set.
      * Web-URL für diese Welt
      * @return True if the 'webUrl' field has been set, false otherwise.
      */
    public boolean hasWebUrl() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'webUrl' field.
      * Web-URL für diese Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearWebUrl() {
      webUrl = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Beschreibung der Welt
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * Beschreibung der Welt
      * @param value The value of 'description'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setDescription(java.lang.String value) {
      validate(fields()[8], value);
      this.description = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Beschreibung der Welt
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'description' field.
      * Beschreibung der Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearDescription() {
      description = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'worldType' field.
      * Typ der Welt (z.B. settlement, cantina, temple)
      * @return The value.
      */
    public java.lang.String getWorldType() {
      return worldType;
    }


    /**
      * Sets the value of the 'worldType' field.
      * Typ der Welt (z.B. settlement, cantina, temple)
      * @param value The value of 'worldType'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setWorldType(java.lang.String value) {
      validate(fields()[9], value);
      this.worldType = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'worldType' field has been set.
      * Typ der Welt (z.B. settlement, cantina, temple)
      * @return True if the 'worldType' field has been set, false otherwise.
      */
    public boolean hasWorldType() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'worldType' field.
      * Typ der Welt (z.B. settlement, cantina, temple)
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearWorldType() {
      worldType = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'accessLevel' field.
      * Zugangsebene (public, private, restricted)
      * @return The value.
      */
    public java.lang.String getAccessLevel() {
      return accessLevel;
    }


    /**
      * Sets the value of the 'accessLevel' field.
      * Zugangsebene (public, private, restricted)
      * @param value The value of 'accessLevel'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setAccessLevel(java.lang.String value) {
      validate(fields()[10], value);
      this.accessLevel = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'accessLevel' field has been set.
      * Zugangsebene (public, private, restricted)
      * @return True if the 'accessLevel' field has been set, false otherwise.
      */
    public boolean hasAccessLevel() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'accessLevel' field.
      * Zugangsebene (public, private, restricted)
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearAccessLevel() {
      accessLevel = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Zeitstempel der Anfrage in Millisekunden
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Zeitstempel der Anfrage in Millisekunden
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[11], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Zeitstempel der Anfrage in Millisekunden
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Zeitstempel der Anfrage in Millisekunden
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearTimestamp() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'registeredBy' field.
      * Benutzer oder Service, der die Registrierung durchführt
      * @return The value.
      */
    public java.lang.String getRegisteredBy() {
      return registeredBy;
    }


    /**
      * Sets the value of the 'registeredBy' field.
      * Benutzer oder Service, der die Registrierung durchführt
      * @param value The value of 'registeredBy'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setRegisteredBy(java.lang.String value) {
      validate(fields()[12], value);
      this.registeredBy = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'registeredBy' field has been set.
      * Benutzer oder Service, der die Registrierung durchführt
      * @return True if the 'registeredBy' field has been set, false otherwise.
      */
    public boolean hasRegisteredBy() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'registeredBy' field.
      * Benutzer oder Service, der die Registrierung durchführt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearRegisteredBy() {
      registeredBy = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * Zusätzliche Metadaten für die World-Registrierung
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * Zusätzliche Metadaten für die World-Registrierung
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder setMetadata(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[13], value);
      this.metadata = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * Zusätzliche Metadaten für die World-Registrierung
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'metadata' field.
      * Zusätzliche Metadaten für die World-Registrierung
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationRequest.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WorldRegistrationRequest build() {
      try {
        WorldRegistrationRequest record = new WorldRegistrationRequest();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.String) defaultValue(fields()[0]);
        record.planetName = fieldSetFlags()[1] ? this.planetName : (java.lang.String) defaultValue(fields()[1]);
        record.worldId = fieldSetFlags()[2] ? this.worldId : (java.lang.String) defaultValue(fields()[2]);
        record.worldName = fieldSetFlags()[3] ? this.worldName : (java.lang.String) defaultValue(fields()[3]);
        record.environment = fieldSetFlags()[4] ? this.environment : (de.mhus.nimbus.shared.avro.Environment) defaultValue(fields()[4]);
        record.managementUrl = fieldSetFlags()[5] ? this.managementUrl : (java.lang.String) defaultValue(fields()[5]);
        record.apiUrl = fieldSetFlags()[6] ? this.apiUrl : (java.lang.String) defaultValue(fields()[6]);
        record.webUrl = fieldSetFlags()[7] ? this.webUrl : (java.lang.String) defaultValue(fields()[7]);
        record.description = fieldSetFlags()[8] ? this.description : (java.lang.String) defaultValue(fields()[8]);
        record.worldType = fieldSetFlags()[9] ? this.worldType : (java.lang.String) defaultValue(fields()[9]);
        record.accessLevel = fieldSetFlags()[10] ? this.accessLevel : (java.lang.String) defaultValue(fields()[10]);
        record.timestamp = fieldSetFlags()[11] ? this.timestamp : (java.time.Instant) defaultValue(fields()[11]);
        record.registeredBy = fieldSetFlags()[12] ? this.registeredBy : (java.lang.String) defaultValue(fields()[12]);
        record.metadata = fieldSetFlags()[13] ? this.metadata : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WorldRegistrationRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<WorldRegistrationRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WorldRegistrationRequest>
    READER$ = (org.apache.avro.io.DatumReader<WorldRegistrationRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










