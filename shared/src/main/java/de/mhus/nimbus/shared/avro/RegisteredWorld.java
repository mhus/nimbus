/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RegisteredWorld extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 651717928413956992L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RegisteredWorld\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"fields\":[{\"name\":\"worldId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"ID der registrierten Welt\"},{\"name\":\"worldName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name der registrierten Welt\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"WorldRegistrationStatus\",\"symbols\":[\"CREATED\",\"UPDATED\",\"ALREADY_EXISTS\",\"FAILED\"]},\"doc\":\"Status der Welt-Registrierung\"},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Statusmeldung für diese Welt\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RegisteredWorld> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RegisteredWorld> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RegisteredWorld> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RegisteredWorld> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RegisteredWorld> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RegisteredWorld to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RegisteredWorld from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RegisteredWorld instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RegisteredWorld fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** ID der registrierten Welt */
  private java.lang.String worldId;
  /** Name der registrierten Welt */
  private java.lang.String worldName;
  /** Status der Welt-Registrierung */
  private de.mhus.nimbus.shared.avro.WorldRegistrationStatus status;
  /** Statusmeldung für diese Welt */
  private java.lang.String message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RegisteredWorld() {}

  /**
   * All-args constructor.
   * @param worldId ID der registrierten Welt
   * @param worldName Name der registrierten Welt
   * @param status Status der Welt-Registrierung
   * @param message Statusmeldung für diese Welt
   */
  public RegisteredWorld(java.lang.String worldId, java.lang.String worldName, de.mhus.nimbus.shared.avro.WorldRegistrationStatus status, java.lang.String message) {
    this.worldId = worldId;
    this.worldName = worldName;
    this.status = status;
    this.message = message;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return worldId;
    case 1: return worldName;
    case 2: return status;
    case 3: return message;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: worldId = value$ != null ? value$.toString() : null; break;
    case 1: worldName = value$ != null ? value$.toString() : null; break;
    case 2: status = (de.mhus.nimbus.shared.avro.WorldRegistrationStatus)value$; break;
    case 3: message = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'worldId' field.
   * @return ID der registrierten Welt
   */
  public java.lang.String getWorldId() {
    return worldId;
  }



  /**
   * Gets the value of the 'worldName' field.
   * @return Name der registrierten Welt
   */
  public java.lang.String getWorldName() {
    return worldName;
  }



  /**
   * Gets the value of the 'status' field.
   * @return Status der Welt-Registrierung
   */
  public de.mhus.nimbus.shared.avro.WorldRegistrationStatus getStatus() {
    return status;
  }



  /**
   * Gets the value of the 'message' field.
   * @return Statusmeldung für diese Welt
   */
  public java.lang.String getMessage() {
    return message;
  }



  /**
   * Creates a new RegisteredWorld RecordBuilder.
   * @return A new RegisteredWorld RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.RegisteredWorld.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.RegisteredWorld.Builder();
  }

  /**
   * Creates a new RegisteredWorld RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RegisteredWorld RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.RegisteredWorld.Builder newBuilder(de.mhus.nimbus.shared.avro.RegisteredWorld.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.RegisteredWorld.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.RegisteredWorld.Builder(other);
    }
  }

  /**
   * Creates a new RegisteredWorld RecordBuilder by copying an existing RegisteredWorld instance.
   * @param other The existing instance to copy.
   * @return A new RegisteredWorld RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.RegisteredWorld.Builder newBuilder(de.mhus.nimbus.shared.avro.RegisteredWorld other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.RegisteredWorld.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.RegisteredWorld.Builder(other);
    }
  }

  /**
   * RecordBuilder for RegisteredWorld instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RegisteredWorld>
    implements org.apache.avro.data.RecordBuilder<RegisteredWorld> {

    /** ID der registrierten Welt */
    private java.lang.String worldId;
    /** Name der registrierten Welt */
    private java.lang.String worldName;
    /** Status der Welt-Registrierung */
    private de.mhus.nimbus.shared.avro.WorldRegistrationStatus status;
    /** Statusmeldung für diese Welt */
    private java.lang.String message;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.RegisteredWorld.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.worldId)) {
        this.worldId = data().deepCopy(fields()[0].schema(), other.worldId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.worldName)) {
        this.worldName = data().deepCopy(fields()[1].schema(), other.worldName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing RegisteredWorld instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.RegisteredWorld other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.worldId)) {
        this.worldId = data().deepCopy(fields()[0].schema(), other.worldId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.worldName)) {
        this.worldName = data().deepCopy(fields()[1].schema(), other.worldName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'worldId' field.
      * ID der registrierten Welt
      * @return The value.
      */
    public java.lang.String getWorldId() {
      return worldId;
    }


    /**
      * Sets the value of the 'worldId' field.
      * ID der registrierten Welt
      * @param value The value of 'worldId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.RegisteredWorld.Builder setWorldId(java.lang.String value) {
      validate(fields()[0], value);
      this.worldId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'worldId' field has been set.
      * ID der registrierten Welt
      * @return True if the 'worldId' field has been set, false otherwise.
      */
    public boolean hasWorldId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'worldId' field.
      * ID der registrierten Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.RegisteredWorld.Builder clearWorldId() {
      worldId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'worldName' field.
      * Name der registrierten Welt
      * @return The value.
      */
    public java.lang.String getWorldName() {
      return worldName;
    }


    /**
      * Sets the value of the 'worldName' field.
      * Name der registrierten Welt
      * @param value The value of 'worldName'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.RegisteredWorld.Builder setWorldName(java.lang.String value) {
      validate(fields()[1], value);
      this.worldName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'worldName' field has been set.
      * Name der registrierten Welt
      * @return True if the 'worldName' field has been set, false otherwise.
      */
    public boolean hasWorldName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'worldName' field.
      * Name der registrierten Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.RegisteredWorld.Builder clearWorldName() {
      worldName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Status der Welt-Registrierung
      * @return The value.
      */
    public de.mhus.nimbus.shared.avro.WorldRegistrationStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * Status der Welt-Registrierung
      * @param value The value of 'status'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.RegisteredWorld.Builder setStatus(de.mhus.nimbus.shared.avro.WorldRegistrationStatus value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Status der Welt-Registrierung
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * Status der Welt-Registrierung
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.RegisteredWorld.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * Statusmeldung für diese Welt
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * Statusmeldung für diese Welt
      * @param value The value of 'message'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.RegisteredWorld.Builder setMessage(java.lang.String value) {
      validate(fields()[3], value);
      this.message = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * Statusmeldung für diese Welt
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'message' field.
      * Statusmeldung für diese Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.RegisteredWorld.Builder clearMessage() {
      message = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RegisteredWorld build() {
      try {
        RegisteredWorld record = new RegisteredWorld();
        record.worldId = fieldSetFlags()[0] ? this.worldId : (java.lang.String) defaultValue(fields()[0]);
        record.worldName = fieldSetFlags()[1] ? this.worldName : (java.lang.String) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (de.mhus.nimbus.shared.avro.WorldRegistrationStatus) defaultValue(fields()[2]);
        record.message = fieldSetFlags()[3] ? this.message : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RegisteredWorld>
    WRITER$ = (org.apache.avro.io.DatumWriter<RegisteredWorld>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RegisteredWorld>
    READER$ = (org.apache.avro.io.DatumReader<RegisteredWorld>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.worldId);

    out.writeString(this.worldName);

    out.writeEnum(this.status.ordinal());

    if (this.message == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.message);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.worldId = in.readString();

      this.worldName = in.readString();

      this.status = de.mhus.nimbus.shared.avro.WorldRegistrationStatus.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.message = null;
      } else {
        this.message = in.readString();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.worldId = in.readString();
          break;

        case 1:
          this.worldName = in.readString();
          break;

        case 2:
          this.status = de.mhus.nimbus.shared.avro.WorldRegistrationStatus.values()[in.readEnum()];
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.message = null;
          } else {
            this.message = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










