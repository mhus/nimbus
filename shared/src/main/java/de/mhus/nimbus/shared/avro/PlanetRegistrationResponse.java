/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema für Planet-Registrierungs-Antworten im Nimbus Registry System */
@org.apache.avro.specific.AvroGenerated
public class PlanetRegistrationResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6590890499563855913L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlanetRegistrationResponse\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"doc\":\"Schema für Planet-Registrierungs-Antworten im Nimbus Registry System\",\"fields\":[{\"name\":\"requestId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"ID der ursprünglichen Planet-Registrierungs-Anfrage\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"PlanetRegistrationStatus\",\"symbols\":[\"SUCCESS\",\"PLANET_ALREADY_EXISTS\",\"WORLD_ALREADY_EXISTS\",\"VALIDATION_ERROR\",\"ERROR\"]},\"doc\":\"Status der Planet-Registrierungs-Anfrage\"},{\"name\":\"planetName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name des registrierten Planeten\"},{\"name\":\"environment\",\"type\":{\"type\":\"enum\",\"name\":\"Environment\",\"symbols\":[\"DEV\",\"TEST\",\"STAGING\",\"PROD\"]},\"doc\":\"Umgebung der Registrierung\"},{\"name\":\"registeredWorlds\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RegisteredWorld\",\"fields\":[{\"name\":\"worldId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"ID der registrierten Welt\"},{\"name\":\"worldName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name der registrierten Welt\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"WorldRegistrationStatus\",\"symbols\":[\"CREATED\",\"UPDATED\",\"ALREADY_EXISTS\",\"FAILED\"]},\"doc\":\"Status der Welt-Registrierung\"},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Statusmeldung für diese Welt\",\"default\":null}]}},\"doc\":\"Liste der verarbeiteten Welten mit ihrem Status\",\"default\":[]},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Zeitstempel der Antwort\"},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Allgemeine Statusmeldung\",\"default\":null},{\"name\":\"errorMessage\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Fehlermeldung bei ERROR-Status\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<PlanetRegistrationResponse> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlanetRegistrationResponse> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PlanetRegistrationResponse> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PlanetRegistrationResponse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PlanetRegistrationResponse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PlanetRegistrationResponse to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PlanetRegistrationResponse from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PlanetRegistrationResponse instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PlanetRegistrationResponse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** ID der ursprünglichen Planet-Registrierungs-Anfrage */
  private java.lang.String requestId;
  /** Status der Planet-Registrierungs-Anfrage */
  private de.mhus.nimbus.shared.avro.PlanetRegistrationStatus status;
  /** Name des registrierten Planeten */
  private java.lang.String planetName;
  /** Umgebung der Registrierung */
  private de.mhus.nimbus.shared.avro.Environment environment;
  /** Liste der verarbeiteten Welten mit ihrem Status */
  private java.util.List<de.mhus.nimbus.shared.avro.RegisteredWorld> registeredWorlds;
  /** Zeitstempel der Antwort */
  private java.time.Instant timestamp;
  /** Allgemeine Statusmeldung */
  private java.lang.String message;
  /** Fehlermeldung bei ERROR-Status */
  private java.lang.String errorMessage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlanetRegistrationResponse() {}

  /**
   * All-args constructor.
   * @param requestId ID der ursprünglichen Planet-Registrierungs-Anfrage
   * @param status Status der Planet-Registrierungs-Anfrage
   * @param planetName Name des registrierten Planeten
   * @param environment Umgebung der Registrierung
   * @param registeredWorlds Liste der verarbeiteten Welten mit ihrem Status
   * @param timestamp Zeitstempel der Antwort
   * @param message Allgemeine Statusmeldung
   * @param errorMessage Fehlermeldung bei ERROR-Status
   */
  public PlanetRegistrationResponse(java.lang.String requestId, de.mhus.nimbus.shared.avro.PlanetRegistrationStatus status, java.lang.String planetName, de.mhus.nimbus.shared.avro.Environment environment, java.util.List<de.mhus.nimbus.shared.avro.RegisteredWorld> registeredWorlds, java.time.Instant timestamp, java.lang.String message, java.lang.String errorMessage) {
    this.requestId = requestId;
    this.status = status;
    this.planetName = planetName;
    this.environment = environment;
    this.registeredWorlds = registeredWorlds;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.message = message;
    this.errorMessage = errorMessage;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return status;
    case 2: return planetName;
    case 3: return environment;
    case 4: return registeredWorlds;
    case 5: return timestamp;
    case 6: return message;
    case 7: return errorMessage;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = value$ != null ? value$.toString() : null; break;
    case 1: status = (de.mhus.nimbus.shared.avro.PlanetRegistrationStatus)value$; break;
    case 2: planetName = value$ != null ? value$.toString() : null; break;
    case 3: environment = (de.mhus.nimbus.shared.avro.Environment)value$; break;
    case 4: registeredWorlds = (java.util.List<de.mhus.nimbus.shared.avro.RegisteredWorld>)value$; break;
    case 5: timestamp = (java.time.Instant)value$; break;
    case 6: message = value$ != null ? value$.toString() : null; break;
    case 7: errorMessage = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return ID der ursprünglichen Planet-Registrierungs-Anfrage
   */
  public java.lang.String getRequestId() {
    return requestId;
  }



  /**
   * Gets the value of the 'status' field.
   * @return Status der Planet-Registrierungs-Anfrage
   */
  public de.mhus.nimbus.shared.avro.PlanetRegistrationStatus getStatus() {
    return status;
  }



  /**
   * Gets the value of the 'planetName' field.
   * @return Name des registrierten Planeten
   */
  public java.lang.String getPlanetName() {
    return planetName;
  }



  /**
   * Gets the value of the 'environment' field.
   * @return Umgebung der Registrierung
   */
  public de.mhus.nimbus.shared.avro.Environment getEnvironment() {
    return environment;
  }



  /**
   * Gets the value of the 'registeredWorlds' field.
   * @return Liste der verarbeiteten Welten mit ihrem Status
   */
  public java.util.List<de.mhus.nimbus.shared.avro.RegisteredWorld> getRegisteredWorlds() {
    return registeredWorlds;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return Zeitstempel der Antwort
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }



  /**
   * Gets the value of the 'message' field.
   * @return Allgemeine Statusmeldung
   */
  public java.lang.String getMessage() {
    return message;
  }



  /**
   * Gets the value of the 'errorMessage' field.
   * @return Fehlermeldung bei ERROR-Status
   */
  public java.lang.String getErrorMessage() {
    return errorMessage;
  }



  /**
   * Creates a new PlanetRegistrationResponse RecordBuilder.
   * @return A new PlanetRegistrationResponse RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder();
  }

  /**
   * Creates a new PlanetRegistrationResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlanetRegistrationResponse RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder newBuilder(de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder(other);
    }
  }

  /**
   * Creates a new PlanetRegistrationResponse RecordBuilder by copying an existing PlanetRegistrationResponse instance.
   * @param other The existing instance to copy.
   * @return A new PlanetRegistrationResponse RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder newBuilder(de.mhus.nimbus.shared.avro.PlanetRegistrationResponse other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder(other);
    }
  }

  /**
   * RecordBuilder for PlanetRegistrationResponse instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlanetRegistrationResponse>
    implements org.apache.avro.data.RecordBuilder<PlanetRegistrationResponse> {

    /** ID der ursprünglichen Planet-Registrierungs-Anfrage */
    private java.lang.String requestId;
    /** Status der Planet-Registrierungs-Anfrage */
    private de.mhus.nimbus.shared.avro.PlanetRegistrationStatus status;
    /** Name des registrierten Planeten */
    private java.lang.String planetName;
    /** Umgebung der Registrierung */
    private de.mhus.nimbus.shared.avro.Environment environment;
    /** Liste der verarbeiteten Welten mit ihrem Status */
    private java.util.List<de.mhus.nimbus.shared.avro.RegisteredWorld> registeredWorlds;
    /** Zeitstempel der Antwort */
    private java.time.Instant timestamp;
    /** Allgemeine Statusmeldung */
    private java.lang.String message;
    /** Fehlermeldung bei ERROR-Status */
    private java.lang.String errorMessage;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.planetName)) {
        this.planetName = data().deepCopy(fields()[2].schema(), other.planetName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.environment)) {
        this.environment = data().deepCopy(fields()[3].schema(), other.environment);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.registeredWorlds)) {
        this.registeredWorlds = data().deepCopy(fields()[4].schema(), other.registeredWorlds);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.message)) {
        this.message = data().deepCopy(fields()[6].schema(), other.message);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.errorMessage)) {
        this.errorMessage = data().deepCopy(fields()[7].schema(), other.errorMessage);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing PlanetRegistrationResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.PlanetRegistrationResponse other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.planetName)) {
        this.planetName = data().deepCopy(fields()[2].schema(), other.planetName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.environment)) {
        this.environment = data().deepCopy(fields()[3].schema(), other.environment);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.registeredWorlds)) {
        this.registeredWorlds = data().deepCopy(fields()[4].schema(), other.registeredWorlds);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.message)) {
        this.message = data().deepCopy(fields()[6].schema(), other.message);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.errorMessage)) {
        this.errorMessage = data().deepCopy(fields()[7].schema(), other.errorMessage);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'requestId' field.
      * ID der ursprünglichen Planet-Registrierungs-Anfrage
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * ID der ursprünglichen Planet-Registrierungs-Anfrage
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder setRequestId(java.lang.String value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * ID der ursprünglichen Planet-Registrierungs-Anfrage
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestId' field.
      * ID der ursprünglichen Planet-Registrierungs-Anfrage
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Status der Planet-Registrierungs-Anfrage
      * @return The value.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * Status der Planet-Registrierungs-Anfrage
      * @param value The value of 'status'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder setStatus(de.mhus.nimbus.shared.avro.PlanetRegistrationStatus value) {
      validate(fields()[1], value);
      this.status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Status der Planet-Registrierungs-Anfrage
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'status' field.
      * Status der Planet-Registrierungs-Anfrage
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder clearStatus() {
      status = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'planetName' field.
      * Name des registrierten Planeten
      * @return The value.
      */
    public java.lang.String getPlanetName() {
      return planetName;
    }


    /**
      * Sets the value of the 'planetName' field.
      * Name des registrierten Planeten
      * @param value The value of 'planetName'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder setPlanetName(java.lang.String value) {
      validate(fields()[2], value);
      this.planetName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'planetName' field has been set.
      * Name des registrierten Planeten
      * @return True if the 'planetName' field has been set, false otherwise.
      */
    public boolean hasPlanetName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'planetName' field.
      * Name des registrierten Planeten
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder clearPlanetName() {
      planetName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'environment' field.
      * Umgebung der Registrierung
      * @return The value.
      */
    public de.mhus.nimbus.shared.avro.Environment getEnvironment() {
      return environment;
    }


    /**
      * Sets the value of the 'environment' field.
      * Umgebung der Registrierung
      * @param value The value of 'environment'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder setEnvironment(de.mhus.nimbus.shared.avro.Environment value) {
      validate(fields()[3], value);
      this.environment = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'environment' field has been set.
      * Umgebung der Registrierung
      * @return True if the 'environment' field has been set, false otherwise.
      */
    public boolean hasEnvironment() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'environment' field.
      * Umgebung der Registrierung
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder clearEnvironment() {
      environment = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'registeredWorlds' field.
      * Liste der verarbeiteten Welten mit ihrem Status
      * @return The value.
      */
    public java.util.List<de.mhus.nimbus.shared.avro.RegisteredWorld> getRegisteredWorlds() {
      return registeredWorlds;
    }


    /**
      * Sets the value of the 'registeredWorlds' field.
      * Liste der verarbeiteten Welten mit ihrem Status
      * @param value The value of 'registeredWorlds'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder setRegisteredWorlds(java.util.List<de.mhus.nimbus.shared.avro.RegisteredWorld> value) {
      validate(fields()[4], value);
      this.registeredWorlds = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'registeredWorlds' field has been set.
      * Liste der verarbeiteten Welten mit ihrem Status
      * @return True if the 'registeredWorlds' field has been set, false otherwise.
      */
    public boolean hasRegisteredWorlds() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'registeredWorlds' field.
      * Liste der verarbeiteten Welten mit ihrem Status
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder clearRegisteredWorlds() {
      registeredWorlds = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Zeitstempel der Antwort
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Zeitstempel der Antwort
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[5], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Zeitstempel der Antwort
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Zeitstempel der Antwort
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder clearTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * Allgemeine Statusmeldung
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * Allgemeine Statusmeldung
      * @param value The value of 'message'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder setMessage(java.lang.String value) {
      validate(fields()[6], value);
      this.message = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * Allgemeine Statusmeldung
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'message' field.
      * Allgemeine Statusmeldung
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder clearMessage() {
      message = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorMessage' field.
      * Fehlermeldung bei ERROR-Status
      * @return The value.
      */
    public java.lang.String getErrorMessage() {
      return errorMessage;
    }


    /**
      * Sets the value of the 'errorMessage' field.
      * Fehlermeldung bei ERROR-Status
      * @param value The value of 'errorMessage'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder setErrorMessage(java.lang.String value) {
      validate(fields()[7], value);
      this.errorMessage = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'errorMessage' field has been set.
      * Fehlermeldung bei ERROR-Status
      * @return True if the 'errorMessage' field has been set, false otherwise.
      */
    public boolean hasErrorMessage() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'errorMessage' field.
      * Fehlermeldung bei ERROR-Status
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetRegistrationResponse.Builder clearErrorMessage() {
      errorMessage = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlanetRegistrationResponse build() {
      try {
        PlanetRegistrationResponse record = new PlanetRegistrationResponse();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.String) defaultValue(fields()[0]);
        record.status = fieldSetFlags()[1] ? this.status : (de.mhus.nimbus.shared.avro.PlanetRegistrationStatus) defaultValue(fields()[1]);
        record.planetName = fieldSetFlags()[2] ? this.planetName : (java.lang.String) defaultValue(fields()[2]);
        record.environment = fieldSetFlags()[3] ? this.environment : (de.mhus.nimbus.shared.avro.Environment) defaultValue(fields()[3]);
        record.registeredWorlds = fieldSetFlags()[4] ? this.registeredWorlds : (java.util.List<de.mhus.nimbus.shared.avro.RegisteredWorld>) defaultValue(fields()[4]);
        record.timestamp = fieldSetFlags()[5] ? this.timestamp : (java.time.Instant) defaultValue(fields()[5]);
        record.message = fieldSetFlags()[6] ? this.message : (java.lang.String) defaultValue(fields()[6]);
        record.errorMessage = fieldSetFlags()[7] ? this.errorMessage : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlanetRegistrationResponse>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlanetRegistrationResponse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlanetRegistrationResponse>
    READER$ = (org.apache.avro.io.DatumReader<PlanetRegistrationResponse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










