/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Request to lookup ACEs */
@org.apache.avro.specific.AvroGenerated
public class AceLookupRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4958551079578152446L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AceLookupRequest\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"doc\":\"Request to lookup ACEs\",\"fields\":[{\"name\":\"requestId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier for this request\"},{\"name\":\"aceId\",\"type\":[\"null\",\"long\"],\"doc\":\"Specific ACE ID to lookup\",\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",\"long\"],\"doc\":\"User ID to get ACEs for\",\"default\":null},{\"name\":\"rulePattern\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Rule pattern to search for\",\"default\":null},{\"name\":\"activeOnly\",\"type\":\"boolean\",\"doc\":\"Whether to return only active ACEs\",\"default\":false},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Timestamp when the request was created\"},{\"name\":\"requestedBy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Who requested this operation\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<AceLookupRequest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AceLookupRequest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AceLookupRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AceLookupRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AceLookupRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AceLookupRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AceLookupRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AceLookupRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AceLookupRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for this request */
  private java.lang.String requestId;
  /** Specific ACE ID to lookup */
  private java.lang.Long aceId;
  /** User ID to get ACEs for */
  private java.lang.Long userId;
  /** Rule pattern to search for */
  private java.lang.String rulePattern;
  /** Whether to return only active ACEs */
  private boolean activeOnly;
  /** Timestamp when the request was created */
  private java.time.Instant timestamp;
  /** Who requested this operation */
  private java.lang.String requestedBy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AceLookupRequest() {}

  /**
   * All-args constructor.
   * @param requestId Unique identifier for this request
   * @param aceId Specific ACE ID to lookup
   * @param userId User ID to get ACEs for
   * @param rulePattern Rule pattern to search for
   * @param activeOnly Whether to return only active ACEs
   * @param timestamp Timestamp when the request was created
   * @param requestedBy Who requested this operation
   */
  public AceLookupRequest(java.lang.String requestId, java.lang.Long aceId, java.lang.Long userId, java.lang.String rulePattern, java.lang.Boolean activeOnly, java.time.Instant timestamp, java.lang.String requestedBy) {
    this.requestId = requestId;
    this.aceId = aceId;
    this.userId = userId;
    this.rulePattern = rulePattern;
    this.activeOnly = activeOnly;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.requestedBy = requestedBy;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return aceId;
    case 2: return userId;
    case 3: return rulePattern;
    case 4: return activeOnly;
    case 5: return timestamp;
    case 6: return requestedBy;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = value$ != null ? value$.toString() : null; break;
    case 1: aceId = (java.lang.Long)value$; break;
    case 2: userId = (java.lang.Long)value$; break;
    case 3: rulePattern = value$ != null ? value$.toString() : null; break;
    case 4: activeOnly = (java.lang.Boolean)value$; break;
    case 5: timestamp = (java.time.Instant)value$; break;
    case 6: requestedBy = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return Unique identifier for this request
   */
  public java.lang.String getRequestId() {
    return requestId;
  }


  /**
   * Sets the value of the 'requestId' field.
   * Unique identifier for this request
   * @param value the value to set.
   */
  public void setRequestId(java.lang.String value) {
    this.requestId = value;
  }

  /**
   * Gets the value of the 'aceId' field.
   * @return Specific ACE ID to lookup
   */
  public java.lang.Long getAceId() {
    return aceId;
  }


  /**
   * Sets the value of the 'aceId' field.
   * Specific ACE ID to lookup
   * @param value the value to set.
   */
  public void setAceId(java.lang.Long value) {
    this.aceId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return User ID to get ACEs for
   */
  public java.lang.Long getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * User ID to get ACEs for
   * @param value the value to set.
   */
  public void setUserId(java.lang.Long value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'rulePattern' field.
   * @return Rule pattern to search for
   */
  public java.lang.String getRulePattern() {
    return rulePattern;
  }


  /**
   * Sets the value of the 'rulePattern' field.
   * Rule pattern to search for
   * @param value the value to set.
   */
  public void setRulePattern(java.lang.String value) {
    this.rulePattern = value;
  }

  /**
   * Gets the value of the 'activeOnly' field.
   * @return Whether to return only active ACEs
   */
  public boolean getActiveOnly() {
    return activeOnly;
  }


  /**
   * Sets the value of the 'activeOnly' field.
   * Whether to return only active ACEs
   * @param value the value to set.
   */
  public void setActiveOnly(boolean value) {
    this.activeOnly = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp when the request was created
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp when the request was created
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'requestedBy' field.
   * @return Who requested this operation
   */
  public java.lang.String getRequestedBy() {
    return requestedBy;
  }


  /**
   * Sets the value of the 'requestedBy' field.
   * Who requested this operation
   * @param value the value to set.
   */
  public void setRequestedBy(java.lang.String value) {
    this.requestedBy = value;
  }

  /**
   * Creates a new AceLookupRequest RecordBuilder.
   * @return A new AceLookupRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.AceLookupRequest.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.AceLookupRequest.Builder();
  }

  /**
   * Creates a new AceLookupRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AceLookupRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.AceLookupRequest.Builder newBuilder(de.mhus.nimbus.shared.avro.AceLookupRequest.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.AceLookupRequest.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.AceLookupRequest.Builder(other);
    }
  }

  /**
   * Creates a new AceLookupRequest RecordBuilder by copying an existing AceLookupRequest instance.
   * @param other The existing instance to copy.
   * @return A new AceLookupRequest RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.AceLookupRequest.Builder newBuilder(de.mhus.nimbus.shared.avro.AceLookupRequest other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.AceLookupRequest.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.AceLookupRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for AceLookupRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AceLookupRequest>
    implements org.apache.avro.data.RecordBuilder<AceLookupRequest> {

    /** Unique identifier for this request */
    private java.lang.String requestId;
    /** Specific ACE ID to lookup */
    private java.lang.Long aceId;
    /** User ID to get ACEs for */
    private java.lang.Long userId;
    /** Rule pattern to search for */
    private java.lang.String rulePattern;
    /** Whether to return only active ACEs */
    private boolean activeOnly;
    /** Timestamp when the request was created */
    private java.time.Instant timestamp;
    /** Who requested this operation */
    private java.lang.String requestedBy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.AceLookupRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.aceId)) {
        this.aceId = data().deepCopy(fields()[1].schema(), other.aceId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.rulePattern)) {
        this.rulePattern = data().deepCopy(fields()[3].schema(), other.rulePattern);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.activeOnly)) {
        this.activeOnly = data().deepCopy(fields()[4].schema(), other.activeOnly);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.requestedBy)) {
        this.requestedBy = data().deepCopy(fields()[6].schema(), other.requestedBy);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing AceLookupRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.AceLookupRequest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aceId)) {
        this.aceId = data().deepCopy(fields()[1].schema(), other.aceId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.rulePattern)) {
        this.rulePattern = data().deepCopy(fields()[3].schema(), other.rulePattern);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.activeOnly)) {
        this.activeOnly = data().deepCopy(fields()[4].schema(), other.activeOnly);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.requestedBy)) {
        this.requestedBy = data().deepCopy(fields()[6].schema(), other.requestedBy);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'requestId' field.
      * Unique identifier for this request
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * Unique identifier for this request
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder setRequestId(java.lang.String value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * Unique identifier for this request
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestId' field.
      * Unique identifier for this request
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'aceId' field.
      * Specific ACE ID to lookup
      * @return The value.
      */
    public java.lang.Long getAceId() {
      return aceId;
    }


    /**
      * Sets the value of the 'aceId' field.
      * Specific ACE ID to lookup
      * @param value The value of 'aceId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder setAceId(java.lang.Long value) {
      validate(fields()[1], value);
      this.aceId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'aceId' field has been set.
      * Specific ACE ID to lookup
      * @return True if the 'aceId' field has been set, false otherwise.
      */
    public boolean hasAceId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'aceId' field.
      * Specific ACE ID to lookup
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder clearAceId() {
      aceId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * User ID to get ACEs for
      * @return The value.
      */
    public java.lang.Long getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * User ID to get ACEs for
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder setUserId(java.lang.Long value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * User ID to get ACEs for
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * User ID to get ACEs for
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'rulePattern' field.
      * Rule pattern to search for
      * @return The value.
      */
    public java.lang.String getRulePattern() {
      return rulePattern;
    }


    /**
      * Sets the value of the 'rulePattern' field.
      * Rule pattern to search for
      * @param value The value of 'rulePattern'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder setRulePattern(java.lang.String value) {
      validate(fields()[3], value);
      this.rulePattern = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'rulePattern' field has been set.
      * Rule pattern to search for
      * @return True if the 'rulePattern' field has been set, false otherwise.
      */
    public boolean hasRulePattern() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'rulePattern' field.
      * Rule pattern to search for
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder clearRulePattern() {
      rulePattern = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'activeOnly' field.
      * Whether to return only active ACEs
      * @return The value.
      */
    public boolean getActiveOnly() {
      return activeOnly;
    }


    /**
      * Sets the value of the 'activeOnly' field.
      * Whether to return only active ACEs
      * @param value The value of 'activeOnly'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder setActiveOnly(boolean value) {
      validate(fields()[4], value);
      this.activeOnly = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'activeOnly' field has been set.
      * Whether to return only active ACEs
      * @return True if the 'activeOnly' field has been set, false otherwise.
      */
    public boolean hasActiveOnly() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'activeOnly' field.
      * Whether to return only active ACEs
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder clearActiveOnly() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp when the request was created
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp when the request was created
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[5], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp when the request was created
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp when the request was created
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder clearTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestedBy' field.
      * Who requested this operation
      * @return The value.
      */
    public java.lang.String getRequestedBy() {
      return requestedBy;
    }


    /**
      * Sets the value of the 'requestedBy' field.
      * Who requested this operation
      * @param value The value of 'requestedBy'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder setRequestedBy(java.lang.String value) {
      validate(fields()[6], value);
      this.requestedBy = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'requestedBy' field has been set.
      * Who requested this operation
      * @return True if the 'requestedBy' field has been set, false otherwise.
      */
    public boolean hasRequestedBy() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'requestedBy' field.
      * Who requested this operation
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.AceLookupRequest.Builder clearRequestedBy() {
      requestedBy = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AceLookupRequest build() {
      try {
        AceLookupRequest record = new AceLookupRequest();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.String) defaultValue(fields()[0]);
        record.aceId = fieldSetFlags()[1] ? this.aceId : (java.lang.Long) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.lang.Long) defaultValue(fields()[2]);
        record.rulePattern = fieldSetFlags()[3] ? this.rulePattern : (java.lang.String) defaultValue(fields()[3]);
        record.activeOnly = fieldSetFlags()[4] ? this.activeOnly : (java.lang.Boolean) defaultValue(fields()[4]);
        record.timestamp = fieldSetFlags()[5] ? this.timestamp : (java.time.Instant) defaultValue(fields()[5]);
        record.requestedBy = fieldSetFlags()[6] ? this.requestedBy : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AceLookupRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<AceLookupRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AceLookupRequest>
    READER$ = (org.apache.avro.io.DatumReader<AceLookupRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










