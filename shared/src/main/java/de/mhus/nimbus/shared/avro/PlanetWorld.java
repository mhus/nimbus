/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PlanetWorld extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5304329122553035165L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlanetWorld\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"fields\":[{\"name\":\"worldId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Eindeutige ID der Welt\"},{\"name\":\"worldName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name der Welt\"},{\"name\":\"managementUrl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"URL des Management-Services für diese Welt\"},{\"name\":\"apiUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"API-URL für diese Welt\",\"default\":null},{\"name\":\"webUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Web-URL für diese Welt\",\"default\":null},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"WorldStatus\",\"symbols\":[\"ACTIVE\",\"INACTIVE\",\"MAINTENANCE\",\"ERROR\"]},\"doc\":\"Status der Welt\",\"default\":\"ACTIVE\"},{\"name\":\"lastUpdate\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Zeitstempel der letzten Aktualisierung\"},{\"name\":\"metadata\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"Zusätzliche Metadaten der Welt\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<PlanetWorld> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlanetWorld> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PlanetWorld> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PlanetWorld> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PlanetWorld> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PlanetWorld to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PlanetWorld from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PlanetWorld instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PlanetWorld fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Eindeutige ID der Welt */
  private java.lang.String worldId;
  /** Name der Welt */
  private java.lang.String worldName;
  /** URL des Management-Services für diese Welt */
  private java.lang.String managementUrl;
  /** API-URL für diese Welt */
  private java.lang.String apiUrl;
  /** Web-URL für diese Welt */
  private java.lang.String webUrl;
  /** Status der Welt */
  private de.mhus.nimbus.shared.avro.WorldStatus status;
  /** Zeitstempel der letzten Aktualisierung */
  private java.time.Instant lastUpdate;
  /** Zusätzliche Metadaten der Welt */
  private java.util.Map<java.lang.String,java.lang.String> metadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlanetWorld() {}

  /**
   * All-args constructor.
   * @param worldId Eindeutige ID der Welt
   * @param worldName Name der Welt
   * @param managementUrl URL des Management-Services für diese Welt
   * @param apiUrl API-URL für diese Welt
   * @param webUrl Web-URL für diese Welt
   * @param status Status der Welt
   * @param lastUpdate Zeitstempel der letzten Aktualisierung
   * @param metadata Zusätzliche Metadaten der Welt
   */
  public PlanetWorld(java.lang.String worldId, java.lang.String worldName, java.lang.String managementUrl, java.lang.String apiUrl, java.lang.String webUrl, de.mhus.nimbus.shared.avro.WorldStatus status, java.time.Instant lastUpdate, java.util.Map<java.lang.String,java.lang.String> metadata) {
    this.worldId = worldId;
    this.worldName = worldName;
    this.managementUrl = managementUrl;
    this.apiUrl = apiUrl;
    this.webUrl = webUrl;
    this.status = status;
    this.lastUpdate = lastUpdate.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.metadata = metadata;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return worldId;
    case 1: return worldName;
    case 2: return managementUrl;
    case 3: return apiUrl;
    case 4: return webUrl;
    case 5: return status;
    case 6: return lastUpdate;
    case 7: return metadata;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: worldId = value$ != null ? value$.toString() : null; break;
    case 1: worldName = value$ != null ? value$.toString() : null; break;
    case 2: managementUrl = value$ != null ? value$.toString() : null; break;
    case 3: apiUrl = value$ != null ? value$.toString() : null; break;
    case 4: webUrl = value$ != null ? value$.toString() : null; break;
    case 5: status = (de.mhus.nimbus.shared.avro.WorldStatus)value$; break;
    case 6: lastUpdate = (java.time.Instant)value$; break;
    case 7: metadata = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'worldId' field.
   * @return Eindeutige ID der Welt
   */
  public java.lang.String getWorldId() {
    return worldId;
  }



  /**
   * Gets the value of the 'worldName' field.
   * @return Name der Welt
   */
  public java.lang.String getWorldName() {
    return worldName;
  }



  /**
   * Gets the value of the 'managementUrl' field.
   * @return URL des Management-Services für diese Welt
   */
  public java.lang.String getManagementUrl() {
    return managementUrl;
  }



  /**
   * Gets the value of the 'apiUrl' field.
   * @return API-URL für diese Welt
   */
  public java.lang.String getApiUrl() {
    return apiUrl;
  }



  /**
   * Gets the value of the 'webUrl' field.
   * @return Web-URL für diese Welt
   */
  public java.lang.String getWebUrl() {
    return webUrl;
  }



  /**
   * Gets the value of the 'status' field.
   * @return Status der Welt
   */
  public de.mhus.nimbus.shared.avro.WorldStatus getStatus() {
    return status;
  }



  /**
   * Gets the value of the 'lastUpdate' field.
   * @return Zeitstempel der letzten Aktualisierung
   */
  public java.time.Instant getLastUpdate() {
    return lastUpdate;
  }



  /**
   * Gets the value of the 'metadata' field.
   * @return Zusätzliche Metadaten der Welt
   */
  public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
    return metadata;
  }



  /**
   * Creates a new PlanetWorld RecordBuilder.
   * @return A new PlanetWorld RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PlanetWorld.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.PlanetWorld.Builder();
  }

  /**
   * Creates a new PlanetWorld RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlanetWorld RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PlanetWorld.Builder newBuilder(de.mhus.nimbus.shared.avro.PlanetWorld.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.PlanetWorld.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.PlanetWorld.Builder(other);
    }
  }

  /**
   * Creates a new PlanetWorld RecordBuilder by copying an existing PlanetWorld instance.
   * @param other The existing instance to copy.
   * @return A new PlanetWorld RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PlanetWorld.Builder newBuilder(de.mhus.nimbus.shared.avro.PlanetWorld other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.PlanetWorld.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.PlanetWorld.Builder(other);
    }
  }

  /**
   * RecordBuilder for PlanetWorld instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlanetWorld>
    implements org.apache.avro.data.RecordBuilder<PlanetWorld> {

    /** Eindeutige ID der Welt */
    private java.lang.String worldId;
    /** Name der Welt */
    private java.lang.String worldName;
    /** URL des Management-Services für diese Welt */
    private java.lang.String managementUrl;
    /** API-URL für diese Welt */
    private java.lang.String apiUrl;
    /** Web-URL für diese Welt */
    private java.lang.String webUrl;
    /** Status der Welt */
    private de.mhus.nimbus.shared.avro.WorldStatus status;
    /** Zeitstempel der letzten Aktualisierung */
    private java.time.Instant lastUpdate;
    /** Zusätzliche Metadaten der Welt */
    private java.util.Map<java.lang.String,java.lang.String> metadata;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.PlanetWorld.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.worldId)) {
        this.worldId = data().deepCopy(fields()[0].schema(), other.worldId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.worldName)) {
        this.worldName = data().deepCopy(fields()[1].schema(), other.worldName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.managementUrl)) {
        this.managementUrl = data().deepCopy(fields()[2].schema(), other.managementUrl);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.apiUrl)) {
        this.apiUrl = data().deepCopy(fields()[3].schema(), other.apiUrl);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.webUrl)) {
        this.webUrl = data().deepCopy(fields()[4].schema(), other.webUrl);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[6].schema(), other.lastUpdate);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.metadata)) {
        this.metadata = data().deepCopy(fields()[7].schema(), other.metadata);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing PlanetWorld instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.PlanetWorld other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.worldId)) {
        this.worldId = data().deepCopy(fields()[0].schema(), other.worldId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.worldName)) {
        this.worldName = data().deepCopy(fields()[1].schema(), other.worldName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.managementUrl)) {
        this.managementUrl = data().deepCopy(fields()[2].schema(), other.managementUrl);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.apiUrl)) {
        this.apiUrl = data().deepCopy(fields()[3].schema(), other.apiUrl);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.webUrl)) {
        this.webUrl = data().deepCopy(fields()[4].schema(), other.webUrl);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[6].schema(), other.lastUpdate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.metadata)) {
        this.metadata = data().deepCopy(fields()[7].schema(), other.metadata);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'worldId' field.
      * Eindeutige ID der Welt
      * @return The value.
      */
    public java.lang.String getWorldId() {
      return worldId;
    }


    /**
      * Sets the value of the 'worldId' field.
      * Eindeutige ID der Welt
      * @param value The value of 'worldId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder setWorldId(java.lang.String value) {
      validate(fields()[0], value);
      this.worldId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'worldId' field has been set.
      * Eindeutige ID der Welt
      * @return True if the 'worldId' field has been set, false otherwise.
      */
    public boolean hasWorldId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'worldId' field.
      * Eindeutige ID der Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder clearWorldId() {
      worldId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'worldName' field.
      * Name der Welt
      * @return The value.
      */
    public java.lang.String getWorldName() {
      return worldName;
    }


    /**
      * Sets the value of the 'worldName' field.
      * Name der Welt
      * @param value The value of 'worldName'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder setWorldName(java.lang.String value) {
      validate(fields()[1], value);
      this.worldName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'worldName' field has been set.
      * Name der Welt
      * @return True if the 'worldName' field has been set, false otherwise.
      */
    public boolean hasWorldName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'worldName' field.
      * Name der Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder clearWorldName() {
      worldName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'managementUrl' field.
      * URL des Management-Services für diese Welt
      * @return The value.
      */
    public java.lang.String getManagementUrl() {
      return managementUrl;
    }


    /**
      * Sets the value of the 'managementUrl' field.
      * URL des Management-Services für diese Welt
      * @param value The value of 'managementUrl'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder setManagementUrl(java.lang.String value) {
      validate(fields()[2], value);
      this.managementUrl = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'managementUrl' field has been set.
      * URL des Management-Services für diese Welt
      * @return True if the 'managementUrl' field has been set, false otherwise.
      */
    public boolean hasManagementUrl() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'managementUrl' field.
      * URL des Management-Services für diese Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder clearManagementUrl() {
      managementUrl = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'apiUrl' field.
      * API-URL für diese Welt
      * @return The value.
      */
    public java.lang.String getApiUrl() {
      return apiUrl;
    }


    /**
      * Sets the value of the 'apiUrl' field.
      * API-URL für diese Welt
      * @param value The value of 'apiUrl'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder setApiUrl(java.lang.String value) {
      validate(fields()[3], value);
      this.apiUrl = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'apiUrl' field has been set.
      * API-URL für diese Welt
      * @return True if the 'apiUrl' field has been set, false otherwise.
      */
    public boolean hasApiUrl() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'apiUrl' field.
      * API-URL für diese Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder clearApiUrl() {
      apiUrl = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'webUrl' field.
      * Web-URL für diese Welt
      * @return The value.
      */
    public java.lang.String getWebUrl() {
      return webUrl;
    }


    /**
      * Sets the value of the 'webUrl' field.
      * Web-URL für diese Welt
      * @param value The value of 'webUrl'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder setWebUrl(java.lang.String value) {
      validate(fields()[4], value);
      this.webUrl = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'webUrl' field has been set.
      * Web-URL für diese Welt
      * @return True if the 'webUrl' field has been set, false otherwise.
      */
    public boolean hasWebUrl() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'webUrl' field.
      * Web-URL für diese Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder clearWebUrl() {
      webUrl = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Status der Welt
      * @return The value.
      */
    public de.mhus.nimbus.shared.avro.WorldStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * Status der Welt
      * @param value The value of 'status'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder setStatus(de.mhus.nimbus.shared.avro.WorldStatus value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Status der Welt
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'status' field.
      * Status der Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder clearStatus() {
      status = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdate' field.
      * Zeitstempel der letzten Aktualisierung
      * @return The value.
      */
    public java.time.Instant getLastUpdate() {
      return lastUpdate;
    }


    /**
      * Sets the value of the 'lastUpdate' field.
      * Zeitstempel der letzten Aktualisierung
      * @param value The value of 'lastUpdate'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder setLastUpdate(java.time.Instant value) {
      validate(fields()[6], value);
      this.lastUpdate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdate' field has been set.
      * Zeitstempel der letzten Aktualisierung
      * @return True if the 'lastUpdate' field has been set, false otherwise.
      */
    public boolean hasLastUpdate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'lastUpdate' field.
      * Zeitstempel der letzten Aktualisierung
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder clearLastUpdate() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * Zusätzliche Metadaten der Welt
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * Zusätzliche Metadaten der Welt
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder setMetadata(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[7], value);
      this.metadata = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * Zusätzliche Metadaten der Welt
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'metadata' field.
      * Zusätzliche Metadaten der Welt
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetWorld.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlanetWorld build() {
      try {
        PlanetWorld record = new PlanetWorld();
        record.worldId = fieldSetFlags()[0] ? this.worldId : (java.lang.String) defaultValue(fields()[0]);
        record.worldName = fieldSetFlags()[1] ? this.worldName : (java.lang.String) defaultValue(fields()[1]);
        record.managementUrl = fieldSetFlags()[2] ? this.managementUrl : (java.lang.String) defaultValue(fields()[2]);
        record.apiUrl = fieldSetFlags()[3] ? this.apiUrl : (java.lang.String) defaultValue(fields()[3]);
        record.webUrl = fieldSetFlags()[4] ? this.webUrl : (java.lang.String) defaultValue(fields()[4]);
        record.status = fieldSetFlags()[5] ? this.status : (de.mhus.nimbus.shared.avro.WorldStatus) defaultValue(fields()[5]);
        record.lastUpdate = fieldSetFlags()[6] ? this.lastUpdate : (java.time.Instant) defaultValue(fields()[6]);
        record.metadata = fieldSetFlags()[7] ? this.metadata : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlanetWorld>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlanetWorld>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlanetWorld>
    READER$ = (org.apache.avro.io.DatumReader<PlanetWorld>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










