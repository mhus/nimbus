/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ServiceInstance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7676730211356091947L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ServiceInstance\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"fields\":[{\"name\":\"instanceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Eindeutige ID der Service-Instanz\"},{\"name\":\"host\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Hostname oder IP-Adresse\"},{\"name\":\"port\",\"type\":\"int\",\"doc\":\"Port der Service-Instanz\"},{\"name\":\"version\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Version der Service-Instanz\"},{\"name\":\"healthy\",\"type\":\"boolean\",\"doc\":\"Gesundheitsstatus der Instanz\",\"default\":true},{\"name\":\"lastHealthCheck\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Zeitstempel der letzten Gesundheitsprüfung\"},{\"name\":\"metadata\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"Zusätzliche Metadaten der Service-Instanz\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<ServiceInstance> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ServiceInstance> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ServiceInstance> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ServiceInstance> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ServiceInstance> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ServiceInstance to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ServiceInstance from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ServiceInstance instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ServiceInstance fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Eindeutige ID der Service-Instanz */
  private java.lang.String instanceId;
  /** Hostname oder IP-Adresse */
  private java.lang.String host;
  /** Port der Service-Instanz */
  private int port;
  /** Version der Service-Instanz */
  private java.lang.String version;
  /** Gesundheitsstatus der Instanz */
  private boolean healthy;
  /** Zeitstempel der letzten Gesundheitsprüfung */
  private java.time.Instant lastHealthCheck;
  /** Zusätzliche Metadaten der Service-Instanz */
  private java.util.Map<java.lang.String,java.lang.String> metadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ServiceInstance() {}

  /**
   * All-args constructor.
   * @param instanceId Eindeutige ID der Service-Instanz
   * @param host Hostname oder IP-Adresse
   * @param port Port der Service-Instanz
   * @param version Version der Service-Instanz
   * @param healthy Gesundheitsstatus der Instanz
   * @param lastHealthCheck Zeitstempel der letzten Gesundheitsprüfung
   * @param metadata Zusätzliche Metadaten der Service-Instanz
   */
  public ServiceInstance(java.lang.String instanceId, java.lang.String host, java.lang.Integer port, java.lang.String version, java.lang.Boolean healthy, java.time.Instant lastHealthCheck, java.util.Map<java.lang.String,java.lang.String> metadata) {
    this.instanceId = instanceId;
    this.host = host;
    this.port = port;
    this.version = version;
    this.healthy = healthy;
    this.lastHealthCheck = lastHealthCheck.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.metadata = metadata;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return instanceId;
    case 1: return host;
    case 2: return port;
    case 3: return version;
    case 4: return healthy;
    case 5: return lastHealthCheck;
    case 6: return metadata;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: instanceId = value$ != null ? value$.toString() : null; break;
    case 1: host = value$ != null ? value$.toString() : null; break;
    case 2: port = (java.lang.Integer)value$; break;
    case 3: version = value$ != null ? value$.toString() : null; break;
    case 4: healthy = (java.lang.Boolean)value$; break;
    case 5: lastHealthCheck = (java.time.Instant)value$; break;
    case 6: metadata = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'instanceId' field.
   * @return Eindeutige ID der Service-Instanz
   */
  public java.lang.String getInstanceId() {
    return instanceId;
  }



  /**
   * Gets the value of the 'host' field.
   * @return Hostname oder IP-Adresse
   */
  public java.lang.String getHost() {
    return host;
  }



  /**
   * Gets the value of the 'port' field.
   * @return Port der Service-Instanz
   */
  public int getPort() {
    return port;
  }



  /**
   * Gets the value of the 'version' field.
   * @return Version der Service-Instanz
   */
  public java.lang.String getVersion() {
    return version;
  }



  /**
   * Gets the value of the 'healthy' field.
   * @return Gesundheitsstatus der Instanz
   */
  public boolean getHealthy() {
    return healthy;
  }



  /**
   * Gets the value of the 'lastHealthCheck' field.
   * @return Zeitstempel der letzten Gesundheitsprüfung
   */
  public java.time.Instant getLastHealthCheck() {
    return lastHealthCheck;
  }



  /**
   * Gets the value of the 'metadata' field.
   * @return Zusätzliche Metadaten der Service-Instanz
   */
  public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
    return metadata;
  }



  /**
   * Creates a new ServiceInstance RecordBuilder.
   * @return A new ServiceInstance RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.ServiceInstance.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.ServiceInstance.Builder();
  }

  /**
   * Creates a new ServiceInstance RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ServiceInstance RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.ServiceInstance.Builder newBuilder(de.mhus.nimbus.shared.avro.ServiceInstance.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.ServiceInstance.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.ServiceInstance.Builder(other);
    }
  }

  /**
   * Creates a new ServiceInstance RecordBuilder by copying an existing ServiceInstance instance.
   * @param other The existing instance to copy.
   * @return A new ServiceInstance RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.ServiceInstance.Builder newBuilder(de.mhus.nimbus.shared.avro.ServiceInstance other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.ServiceInstance.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.ServiceInstance.Builder(other);
    }
  }

  /**
   * RecordBuilder for ServiceInstance instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ServiceInstance>
    implements org.apache.avro.data.RecordBuilder<ServiceInstance> {

    /** Eindeutige ID der Service-Instanz */
    private java.lang.String instanceId;
    /** Hostname oder IP-Adresse */
    private java.lang.String host;
    /** Port der Service-Instanz */
    private int port;
    /** Version der Service-Instanz */
    private java.lang.String version;
    /** Gesundheitsstatus der Instanz */
    private boolean healthy;
    /** Zeitstempel der letzten Gesundheitsprüfung */
    private java.time.Instant lastHealthCheck;
    /** Zusätzliche Metadaten der Service-Instanz */
    private java.util.Map<java.lang.String,java.lang.String> metadata;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.ServiceInstance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.instanceId)) {
        this.instanceId = data().deepCopy(fields()[0].schema(), other.instanceId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.host)) {
        this.host = data().deepCopy(fields()[1].schema(), other.host);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.port)) {
        this.port = data().deepCopy(fields()[2].schema(), other.port);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.version)) {
        this.version = data().deepCopy(fields()[3].schema(), other.version);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.healthy)) {
        this.healthy = data().deepCopy(fields()[4].schema(), other.healthy);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.lastHealthCheck)) {
        this.lastHealthCheck = data().deepCopy(fields()[5].schema(), other.lastHealthCheck);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.metadata)) {
        this.metadata = data().deepCopy(fields()[6].schema(), other.metadata);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing ServiceInstance instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.ServiceInstance other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.instanceId)) {
        this.instanceId = data().deepCopy(fields()[0].schema(), other.instanceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.host)) {
        this.host = data().deepCopy(fields()[1].schema(), other.host);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.port)) {
        this.port = data().deepCopy(fields()[2].schema(), other.port);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.version)) {
        this.version = data().deepCopy(fields()[3].schema(), other.version);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.healthy)) {
        this.healthy = data().deepCopy(fields()[4].schema(), other.healthy);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lastHealthCheck)) {
        this.lastHealthCheck = data().deepCopy(fields()[5].schema(), other.lastHealthCheck);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.metadata)) {
        this.metadata = data().deepCopy(fields()[6].schema(), other.metadata);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'instanceId' field.
      * Eindeutige ID der Service-Instanz
      * @return The value.
      */
    public java.lang.String getInstanceId() {
      return instanceId;
    }


    /**
      * Sets the value of the 'instanceId' field.
      * Eindeutige ID der Service-Instanz
      * @param value The value of 'instanceId'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder setInstanceId(java.lang.String value) {
      validate(fields()[0], value);
      this.instanceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'instanceId' field has been set.
      * Eindeutige ID der Service-Instanz
      * @return True if the 'instanceId' field has been set, false otherwise.
      */
    public boolean hasInstanceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'instanceId' field.
      * Eindeutige ID der Service-Instanz
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder clearInstanceId() {
      instanceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'host' field.
      * Hostname oder IP-Adresse
      * @return The value.
      */
    public java.lang.String getHost() {
      return host;
    }


    /**
      * Sets the value of the 'host' field.
      * Hostname oder IP-Adresse
      * @param value The value of 'host'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder setHost(java.lang.String value) {
      validate(fields()[1], value);
      this.host = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'host' field has been set.
      * Hostname oder IP-Adresse
      * @return True if the 'host' field has been set, false otherwise.
      */
    public boolean hasHost() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'host' field.
      * Hostname oder IP-Adresse
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder clearHost() {
      host = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'port' field.
      * Port der Service-Instanz
      * @return The value.
      */
    public int getPort() {
      return port;
    }


    /**
      * Sets the value of the 'port' field.
      * Port der Service-Instanz
      * @param value The value of 'port'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder setPort(int value) {
      validate(fields()[2], value);
      this.port = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'port' field has been set.
      * Port der Service-Instanz
      * @return True if the 'port' field has been set, false otherwise.
      */
    public boolean hasPort() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'port' field.
      * Port der Service-Instanz
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder clearPort() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * Version der Service-Instanz
      * @return The value.
      */
    public java.lang.String getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * Version der Service-Instanz
      * @param value The value of 'version'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder setVersion(java.lang.String value) {
      validate(fields()[3], value);
      this.version = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * Version der Service-Instanz
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'version' field.
      * Version der Service-Instanz
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder clearVersion() {
      version = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'healthy' field.
      * Gesundheitsstatus der Instanz
      * @return The value.
      */
    public boolean getHealthy() {
      return healthy;
    }


    /**
      * Sets the value of the 'healthy' field.
      * Gesundheitsstatus der Instanz
      * @param value The value of 'healthy'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder setHealthy(boolean value) {
      validate(fields()[4], value);
      this.healthy = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'healthy' field has been set.
      * Gesundheitsstatus der Instanz
      * @return True if the 'healthy' field has been set, false otherwise.
      */
    public boolean hasHealthy() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'healthy' field.
      * Gesundheitsstatus der Instanz
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder clearHealthy() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastHealthCheck' field.
      * Zeitstempel der letzten Gesundheitsprüfung
      * @return The value.
      */
    public java.time.Instant getLastHealthCheck() {
      return lastHealthCheck;
    }


    /**
      * Sets the value of the 'lastHealthCheck' field.
      * Zeitstempel der letzten Gesundheitsprüfung
      * @param value The value of 'lastHealthCheck'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder setLastHealthCheck(java.time.Instant value) {
      validate(fields()[5], value);
      this.lastHealthCheck = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lastHealthCheck' field has been set.
      * Zeitstempel der letzten Gesundheitsprüfung
      * @return True if the 'lastHealthCheck' field has been set, false otherwise.
      */
    public boolean hasLastHealthCheck() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lastHealthCheck' field.
      * Zeitstempel der letzten Gesundheitsprüfung
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder clearLastHealthCheck() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * Zusätzliche Metadaten der Service-Instanz
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * Zusätzliche Metadaten der Service-Instanz
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder setMetadata(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[6], value);
      this.metadata = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * Zusätzliche Metadaten der Service-Instanz
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'metadata' field.
      * Zusätzliche Metadaten der Service-Instanz
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.ServiceInstance.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ServiceInstance build() {
      try {
        ServiceInstance record = new ServiceInstance();
        record.instanceId = fieldSetFlags()[0] ? this.instanceId : (java.lang.String) defaultValue(fields()[0]);
        record.host = fieldSetFlags()[1] ? this.host : (java.lang.String) defaultValue(fields()[1]);
        record.port = fieldSetFlags()[2] ? this.port : (java.lang.Integer) defaultValue(fields()[2]);
        record.version = fieldSetFlags()[3] ? this.version : (java.lang.String) defaultValue(fields()[3]);
        record.healthy = fieldSetFlags()[4] ? this.healthy : (java.lang.Boolean) defaultValue(fields()[4]);
        record.lastHealthCheck = fieldSetFlags()[5] ? this.lastHealthCheck : (java.time.Instant) defaultValue(fields()[5]);
        record.metadata = fieldSetFlags()[6] ? this.metadata : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ServiceInstance>
    WRITER$ = (org.apache.avro.io.DatumWriter<ServiceInstance>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ServiceInstance>
    READER$ = (org.apache.avro.io.DatumReader<ServiceInstance>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










