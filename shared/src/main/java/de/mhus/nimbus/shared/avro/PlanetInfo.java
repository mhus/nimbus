/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mhus.nimbus.shared.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PlanetInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6851420903111424247L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlanetInfo\",\"namespace\":\"de.mhus.nimbus.shared.avro\",\"fields\":[{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Beschreibung des Planeten\",\"default\":null},{\"name\":\"galaxy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Name der Galaxie\",\"default\":null},{\"name\":\"sector\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Sektor innerhalb der Galaxie\",\"default\":null},{\"name\":\"systemName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Name des Sternensystems\",\"default\":null},{\"name\":\"population\",\"type\":[\"null\",\"long\"],\"doc\":\"Bevölkerung des Planeten\",\"default\":null},{\"name\":\"climate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Klima des Planeten\",\"default\":null},{\"name\":\"terrain\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Terrain-Typ des Planeten\",\"default\":null},{\"name\":\"surfaceWater\",\"type\":[\"null\",\"int\"],\"doc\":\"Prozentsatz der Wasseroberfläche\",\"default\":null},{\"name\":\"gravity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Schwerkraft relativ zu Standard\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PlanetInfo> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlanetInfo> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PlanetInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PlanetInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PlanetInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PlanetInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PlanetInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PlanetInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PlanetInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Beschreibung des Planeten */
  private java.lang.String description;
  /** Name der Galaxie */
  private java.lang.String galaxy;
  /** Sektor innerhalb der Galaxie */
  private java.lang.String sector;
  /** Name des Sternensystems */
  private java.lang.String systemName;
  /** Bevölkerung des Planeten */
  private java.lang.Long population;
  /** Klima des Planeten */
  private java.lang.String climate;
  /** Terrain-Typ des Planeten */
  private java.lang.String terrain;
  /** Prozentsatz der Wasseroberfläche */
  private java.lang.Integer surfaceWater;
  /** Schwerkraft relativ zu Standard */
  private java.lang.String gravity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlanetInfo() {}

  /**
   * All-args constructor.
   * @param description Beschreibung des Planeten
   * @param galaxy Name der Galaxie
   * @param sector Sektor innerhalb der Galaxie
   * @param systemName Name des Sternensystems
   * @param population Bevölkerung des Planeten
   * @param climate Klima des Planeten
   * @param terrain Terrain-Typ des Planeten
   * @param surfaceWater Prozentsatz der Wasseroberfläche
   * @param gravity Schwerkraft relativ zu Standard
   */
  public PlanetInfo(java.lang.String description, java.lang.String galaxy, java.lang.String sector, java.lang.String systemName, java.lang.Long population, java.lang.String climate, java.lang.String terrain, java.lang.Integer surfaceWater, java.lang.String gravity) {
    this.description = description;
    this.galaxy = galaxy;
    this.sector = sector;
    this.systemName = systemName;
    this.population = population;
    this.climate = climate;
    this.terrain = terrain;
    this.surfaceWater = surfaceWater;
    this.gravity = gravity;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return description;
    case 1: return galaxy;
    case 2: return sector;
    case 3: return systemName;
    case 4: return population;
    case 5: return climate;
    case 6: return terrain;
    case 7: return surfaceWater;
    case 8: return gravity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: description = value$ != null ? value$.toString() : null; break;
    case 1: galaxy = value$ != null ? value$.toString() : null; break;
    case 2: sector = value$ != null ? value$.toString() : null; break;
    case 3: systemName = value$ != null ? value$.toString() : null; break;
    case 4: population = (java.lang.Long)value$; break;
    case 5: climate = value$ != null ? value$.toString() : null; break;
    case 6: terrain = value$ != null ? value$.toString() : null; break;
    case 7: surfaceWater = (java.lang.Integer)value$; break;
    case 8: gravity = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'description' field.
   * @return Beschreibung des Planeten
   */
  public java.lang.String getDescription() {
    return description;
  }



  /**
   * Gets the value of the 'galaxy' field.
   * @return Name der Galaxie
   */
  public java.lang.String getGalaxy() {
    return galaxy;
  }



  /**
   * Gets the value of the 'sector' field.
   * @return Sektor innerhalb der Galaxie
   */
  public java.lang.String getSector() {
    return sector;
  }



  /**
   * Gets the value of the 'systemName' field.
   * @return Name des Sternensystems
   */
  public java.lang.String getSystemName() {
    return systemName;
  }



  /**
   * Gets the value of the 'population' field.
   * @return Bevölkerung des Planeten
   */
  public java.lang.Long getPopulation() {
    return population;
  }



  /**
   * Gets the value of the 'climate' field.
   * @return Klima des Planeten
   */
  public java.lang.String getClimate() {
    return climate;
  }



  /**
   * Gets the value of the 'terrain' field.
   * @return Terrain-Typ des Planeten
   */
  public java.lang.String getTerrain() {
    return terrain;
  }



  /**
   * Gets the value of the 'surfaceWater' field.
   * @return Prozentsatz der Wasseroberfläche
   */
  public java.lang.Integer getSurfaceWater() {
    return surfaceWater;
  }



  /**
   * Gets the value of the 'gravity' field.
   * @return Schwerkraft relativ zu Standard
   */
  public java.lang.String getGravity() {
    return gravity;
  }



  /**
   * Creates a new PlanetInfo RecordBuilder.
   * @return A new PlanetInfo RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PlanetInfo.Builder newBuilder() {
    return new de.mhus.nimbus.shared.avro.PlanetInfo.Builder();
  }

  /**
   * Creates a new PlanetInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlanetInfo RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PlanetInfo.Builder newBuilder(de.mhus.nimbus.shared.avro.PlanetInfo.Builder other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.PlanetInfo.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.PlanetInfo.Builder(other);
    }
  }

  /**
   * Creates a new PlanetInfo RecordBuilder by copying an existing PlanetInfo instance.
   * @param other The existing instance to copy.
   * @return A new PlanetInfo RecordBuilder
   */
  public static de.mhus.nimbus.shared.avro.PlanetInfo.Builder newBuilder(de.mhus.nimbus.shared.avro.PlanetInfo other) {
    if (other == null) {
      return new de.mhus.nimbus.shared.avro.PlanetInfo.Builder();
    } else {
      return new de.mhus.nimbus.shared.avro.PlanetInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for PlanetInfo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlanetInfo>
    implements org.apache.avro.data.RecordBuilder<PlanetInfo> {

    /** Beschreibung des Planeten */
    private java.lang.String description;
    /** Name der Galaxie */
    private java.lang.String galaxy;
    /** Sektor innerhalb der Galaxie */
    private java.lang.String sector;
    /** Name des Sternensystems */
    private java.lang.String systemName;
    /** Bevölkerung des Planeten */
    private java.lang.Long population;
    /** Klima des Planeten */
    private java.lang.String climate;
    /** Terrain-Typ des Planeten */
    private java.lang.String terrain;
    /** Prozentsatz der Wasseroberfläche */
    private java.lang.Integer surfaceWater;
    /** Schwerkraft relativ zu Standard */
    private java.lang.String gravity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.PlanetInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.description)) {
        this.description = data().deepCopy(fields()[0].schema(), other.description);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.galaxy)) {
        this.galaxy = data().deepCopy(fields()[1].schema(), other.galaxy);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sector)) {
        this.sector = data().deepCopy(fields()[2].schema(), other.sector);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.systemName)) {
        this.systemName = data().deepCopy(fields()[3].schema(), other.systemName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.population)) {
        this.population = data().deepCopy(fields()[4].schema(), other.population);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.climate)) {
        this.climate = data().deepCopy(fields()[5].schema(), other.climate);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.terrain)) {
        this.terrain = data().deepCopy(fields()[6].schema(), other.terrain);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.surfaceWater)) {
        this.surfaceWater = data().deepCopy(fields()[7].schema(), other.surfaceWater);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.gravity)) {
        this.gravity = data().deepCopy(fields()[8].schema(), other.gravity);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing PlanetInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mhus.nimbus.shared.avro.PlanetInfo other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.description)) {
        this.description = data().deepCopy(fields()[0].schema(), other.description);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.galaxy)) {
        this.galaxy = data().deepCopy(fields()[1].schema(), other.galaxy);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sector)) {
        this.sector = data().deepCopy(fields()[2].schema(), other.sector);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.systemName)) {
        this.systemName = data().deepCopy(fields()[3].schema(), other.systemName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.population)) {
        this.population = data().deepCopy(fields()[4].schema(), other.population);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.climate)) {
        this.climate = data().deepCopy(fields()[5].schema(), other.climate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.terrain)) {
        this.terrain = data().deepCopy(fields()[6].schema(), other.terrain);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.surfaceWater)) {
        this.surfaceWater = data().deepCopy(fields()[7].schema(), other.surfaceWater);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.gravity)) {
        this.gravity = data().deepCopy(fields()[8].schema(), other.gravity);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'description' field.
      * Beschreibung des Planeten
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * Beschreibung des Planeten
      * @param value The value of 'description'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder setDescription(java.lang.String value) {
      validate(fields()[0], value);
      this.description = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Beschreibung des Planeten
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'description' field.
      * Beschreibung des Planeten
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder clearDescription() {
      description = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'galaxy' field.
      * Name der Galaxie
      * @return The value.
      */
    public java.lang.String getGalaxy() {
      return galaxy;
    }


    /**
      * Sets the value of the 'galaxy' field.
      * Name der Galaxie
      * @param value The value of 'galaxy'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder setGalaxy(java.lang.String value) {
      validate(fields()[1], value);
      this.galaxy = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'galaxy' field has been set.
      * Name der Galaxie
      * @return True if the 'galaxy' field has been set, false otherwise.
      */
    public boolean hasGalaxy() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'galaxy' field.
      * Name der Galaxie
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder clearGalaxy() {
      galaxy = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sector' field.
      * Sektor innerhalb der Galaxie
      * @return The value.
      */
    public java.lang.String getSector() {
      return sector;
    }


    /**
      * Sets the value of the 'sector' field.
      * Sektor innerhalb der Galaxie
      * @param value The value of 'sector'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder setSector(java.lang.String value) {
      validate(fields()[2], value);
      this.sector = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sector' field has been set.
      * Sektor innerhalb der Galaxie
      * @return True if the 'sector' field has been set, false otherwise.
      */
    public boolean hasSector() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sector' field.
      * Sektor innerhalb der Galaxie
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder clearSector() {
      sector = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'systemName' field.
      * Name des Sternensystems
      * @return The value.
      */
    public java.lang.String getSystemName() {
      return systemName;
    }


    /**
      * Sets the value of the 'systemName' field.
      * Name des Sternensystems
      * @param value The value of 'systemName'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder setSystemName(java.lang.String value) {
      validate(fields()[3], value);
      this.systemName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'systemName' field has been set.
      * Name des Sternensystems
      * @return True if the 'systemName' field has been set, false otherwise.
      */
    public boolean hasSystemName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'systemName' field.
      * Name des Sternensystems
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder clearSystemName() {
      systemName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'population' field.
      * Bevölkerung des Planeten
      * @return The value.
      */
    public java.lang.Long getPopulation() {
      return population;
    }


    /**
      * Sets the value of the 'population' field.
      * Bevölkerung des Planeten
      * @param value The value of 'population'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder setPopulation(java.lang.Long value) {
      validate(fields()[4], value);
      this.population = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'population' field has been set.
      * Bevölkerung des Planeten
      * @return True if the 'population' field has been set, false otherwise.
      */
    public boolean hasPopulation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'population' field.
      * Bevölkerung des Planeten
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder clearPopulation() {
      population = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'climate' field.
      * Klima des Planeten
      * @return The value.
      */
    public java.lang.String getClimate() {
      return climate;
    }


    /**
      * Sets the value of the 'climate' field.
      * Klima des Planeten
      * @param value The value of 'climate'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder setClimate(java.lang.String value) {
      validate(fields()[5], value);
      this.climate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'climate' field has been set.
      * Klima des Planeten
      * @return True if the 'climate' field has been set, false otherwise.
      */
    public boolean hasClimate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'climate' field.
      * Klima des Planeten
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder clearClimate() {
      climate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'terrain' field.
      * Terrain-Typ des Planeten
      * @return The value.
      */
    public java.lang.String getTerrain() {
      return terrain;
    }


    /**
      * Sets the value of the 'terrain' field.
      * Terrain-Typ des Planeten
      * @param value The value of 'terrain'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder setTerrain(java.lang.String value) {
      validate(fields()[6], value);
      this.terrain = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'terrain' field has been set.
      * Terrain-Typ des Planeten
      * @return True if the 'terrain' field has been set, false otherwise.
      */
    public boolean hasTerrain() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'terrain' field.
      * Terrain-Typ des Planeten
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder clearTerrain() {
      terrain = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'surfaceWater' field.
      * Prozentsatz der Wasseroberfläche
      * @return The value.
      */
    public java.lang.Integer getSurfaceWater() {
      return surfaceWater;
    }


    /**
      * Sets the value of the 'surfaceWater' field.
      * Prozentsatz der Wasseroberfläche
      * @param value The value of 'surfaceWater'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder setSurfaceWater(java.lang.Integer value) {
      validate(fields()[7], value);
      this.surfaceWater = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'surfaceWater' field has been set.
      * Prozentsatz der Wasseroberfläche
      * @return True if the 'surfaceWater' field has been set, false otherwise.
      */
    public boolean hasSurfaceWater() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'surfaceWater' field.
      * Prozentsatz der Wasseroberfläche
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder clearSurfaceWater() {
      surfaceWater = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'gravity' field.
      * Schwerkraft relativ zu Standard
      * @return The value.
      */
    public java.lang.String getGravity() {
      return gravity;
    }


    /**
      * Sets the value of the 'gravity' field.
      * Schwerkraft relativ zu Standard
      * @param value The value of 'gravity'.
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder setGravity(java.lang.String value) {
      validate(fields()[8], value);
      this.gravity = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'gravity' field has been set.
      * Schwerkraft relativ zu Standard
      * @return True if the 'gravity' field has been set, false otherwise.
      */
    public boolean hasGravity() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'gravity' field.
      * Schwerkraft relativ zu Standard
      * @return This builder.
      */
    public de.mhus.nimbus.shared.avro.PlanetInfo.Builder clearGravity() {
      gravity = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlanetInfo build() {
      try {
        PlanetInfo record = new PlanetInfo();
        record.description = fieldSetFlags()[0] ? this.description : (java.lang.String) defaultValue(fields()[0]);
        record.galaxy = fieldSetFlags()[1] ? this.galaxy : (java.lang.String) defaultValue(fields()[1]);
        record.sector = fieldSetFlags()[2] ? this.sector : (java.lang.String) defaultValue(fields()[2]);
        record.systemName = fieldSetFlags()[3] ? this.systemName : (java.lang.String) defaultValue(fields()[3]);
        record.population = fieldSetFlags()[4] ? this.population : (java.lang.Long) defaultValue(fields()[4]);
        record.climate = fieldSetFlags()[5] ? this.climate : (java.lang.String) defaultValue(fields()[5]);
        record.terrain = fieldSetFlags()[6] ? this.terrain : (java.lang.String) defaultValue(fields()[6]);
        record.surfaceWater = fieldSetFlags()[7] ? this.surfaceWater : (java.lang.Integer) defaultValue(fields()[7]);
        record.gravity = fieldSetFlags()[8] ? this.gravity : (java.lang.String) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlanetInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlanetInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlanetInfo>
    READER$ = (org.apache.avro.io.DatumReader<PlanetInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.description == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.description);
    }

    if (this.galaxy == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.galaxy);
    }

    if (this.sector == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.sector);
    }

    if (this.systemName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.systemName);
    }

    if (this.population == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.population);
    }

    if (this.climate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.climate);
    }

    if (this.terrain == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.terrain);
    }

    if (this.surfaceWater == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.surfaceWater);
    }

    if (this.gravity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.gravity);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.description = null;
      } else {
        this.description = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.galaxy = null;
      } else {
        this.galaxy = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sector = null;
      } else {
        this.sector = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.systemName = null;
      } else {
        this.systemName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.population = null;
      } else {
        this.population = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.climate = null;
      } else {
        this.climate = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.terrain = null;
      } else {
        this.terrain = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.surfaceWater = null;
      } else {
        this.surfaceWater = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.gravity = null;
      } else {
        this.gravity = in.readString();
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.description = null;
          } else {
            this.description = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.galaxy = null;
          } else {
            this.galaxy = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sector = null;
          } else {
            this.sector = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.systemName = null;
          } else {
            this.systemName = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.population = null;
          } else {
            this.population = in.readLong();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.climate = null;
          } else {
            this.climate = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.terrain = null;
          } else {
            this.terrain = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.surfaceWater = null;
          } else {
            this.surfaceWater = in.readInt();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gravity = null;
          } else {
            this.gravity = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










